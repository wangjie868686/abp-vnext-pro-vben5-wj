// This file is auto-generated by @hey-api/openapi-ts

export const AbpLoginResultSchema = {
    type: 'object',
    properties: {
        result: {
            '$ref': '#/components/schemas/LoginResultType'
        },
        description: {
            type: 'string',
            nullable: true,
            readOnly: true
        }
    },
    additionalProperties: false
} as const;

export const ActionApiDescriptionModelSchema = {
    type: 'object',
    properties: {
        uniqueName: {
            type: 'string',
            nullable: true
        },
        name: {
            type: 'string',
            nullable: true
        },
        httpMethod: {
            type: 'string',
            nullable: true
        },
        url: {
            type: 'string',
            nullable: true
        },
        supportedVersions: {
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: true
        },
        parametersOnMethod: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/MethodParameterApiDescriptionModel'
            },
            nullable: true
        },
        parameters: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ParameterApiDescriptionModel'
            },
            nullable: true
        },
        returnValue: {
            '$ref': '#/components/schemas/ReturnValueApiDescriptionModel'
        },
        allowAnonymous: {
            type: 'boolean',
            nullable: true
        },
        implementFrom: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const AddOrUpdateConnectionStringInputSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            description: 'id',
            format: 'uuid'
        },
        name: {
            type: 'string',
            description: '连接字符串名称',
            nullable: true
        },
        value: {
            type: 'string',
            description: '连接字符串地址',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const AddRoleToOrganizationUnitInputSchema = {
    type: 'object',
    properties: {
        roleId: {
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            nullable: true
        },
        organizationUnitId: {
            type: 'string',
            format: 'uuid'
        }
    },
    additionalProperties: false
} as const;

export const AddUserToOrganizationUnitInputSchema = {
    type: 'object',
    properties: {
        userId: {
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            nullable: true
        },
        organizationUnitId: {
            type: 'string',
            format: 'uuid'
        }
    },
    additionalProperties: false
} as const;

export const AggregateRouteConfigSchema = {
    type: 'object',
    properties: {
        routeKey: {
            type: 'string',
            nullable: true
        },
        parameter: {
            type: 'string',
            nullable: true
        },
        jsonPath: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const ApplicationApiDescriptionModelSchema = {
    type: 'object',
    properties: {
        modules: {
            type: 'object',
            additionalProperties: {
                '$ref': '#/components/schemas/ModuleApiDescriptionModel'
            },
            nullable: true
        },
        types: {
            type: 'object',
            additionalProperties: {
                '$ref': '#/components/schemas/TypeApiDescriptionModel'
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const ApplicationAuthConfigurationDtoSchema = {
    type: 'object',
    properties: {
        grantedPolicies: {
            type: 'object',
            additionalProperties: {
                type: 'boolean'
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const ApplicationConfigurationDtoSchema = {
    type: 'object',
    properties: {
        localization: {
            '$ref': '#/components/schemas/ApplicationLocalizationConfigurationDto'
        },
        auth: {
            '$ref': '#/components/schemas/ApplicationAuthConfigurationDto'
        },
        setting: {
            '$ref': '#/components/schemas/ApplicationSettingConfigurationDto'
        },
        currentUser: {
            '$ref': '#/components/schemas/CurrentUserDto'
        },
        features: {
            '$ref': '#/components/schemas/ApplicationFeatureConfigurationDto'
        },
        globalFeatures: {
            '$ref': '#/components/schemas/ApplicationGlobalFeatureConfigurationDto'
        },
        multiTenancy: {
            '$ref': '#/components/schemas/MultiTenancyInfoDto'
        },
        currentTenant: {
            '$ref': '#/components/schemas/CurrentTenantDto'
        },
        timing: {
            '$ref': '#/components/schemas/TimingDto'
        },
        clock: {
            '$ref': '#/components/schemas/ClockDto'
        },
        objectExtensions: {
            '$ref': '#/components/schemas/ObjectExtensionsDto'
        },
        extraProperties: {
            type: 'object',
            additionalProperties: {},
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const ApplicationFeatureConfigurationDtoSchema = {
    type: 'object',
    properties: {
        values: {
            type: 'object',
            additionalProperties: {
                type: 'string',
                nullable: true
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const ApplicationGlobalFeatureConfigurationDtoSchema = {
    type: 'object',
    properties: {
        enabledFeatures: {
            uniqueItems: true,
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const ApplicationLocalizationConfigurationDtoSchema = {
    type: 'object',
    properties: {
        values: {
            type: 'object',
            additionalProperties: {
                type: 'object',
                additionalProperties: {
                    type: 'string'
                }
            },
            nullable: true
        },
        resources: {
            type: 'object',
            additionalProperties: {
                '$ref': '#/components/schemas/ApplicationLocalizationResourceDto'
            },
            nullable: true
        },
        languages: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/LanguageInfo'
            },
            nullable: true
        },
        currentCulture: {
            '$ref': '#/components/schemas/CurrentCultureDto'
        },
        defaultResourceName: {
            type: 'string',
            nullable: true
        },
        languagesMap: {
            type: 'object',
            additionalProperties: {
                type: 'array',
                items: {
                    '$ref': '#/components/schemas/NameValue'
                }
            },
            nullable: true
        },
        languageFilesMap: {
            type: 'object',
            additionalProperties: {
                type: 'array',
                items: {
                    '$ref': '#/components/schemas/NameValue'
                }
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const ApplicationLocalizationDtoSchema = {
    type: 'object',
    properties: {
        resources: {
            type: 'object',
            additionalProperties: {
                '$ref': '#/components/schemas/ApplicationLocalizationResourceDto'
            },
            nullable: true
        },
        currentCulture: {
            '$ref': '#/components/schemas/CurrentCultureDto'
        }
    },
    additionalProperties: false
} as const;

export const ApplicationLocalizationResourceDtoSchema = {
    type: 'object',
    properties: {
        texts: {
            type: 'object',
            additionalProperties: {
                type: 'string'
            },
            nullable: true
        },
        baseResources: {
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const ApplicationSettingConfigurationDtoSchema = {
    type: 'object',
    properties: {
        values: {
            type: 'object',
            additionalProperties: {
                type: 'string',
                nullable: true
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const ChangePasswordInputSchema = {
    required: ['newPassword'],
    type: 'object',
    properties: {
        currentPassword: {
            maxLength: 128,
            minLength: 0,
            type: 'string',
            nullable: true
        },
        newPassword: {
            maxLength: 128,
            minLength: 0,
            type: 'string'
        }
    },
    additionalProperties: false
} as const;

export const ClockDtoSchema = {
    type: 'object',
    properties: {
        kind: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const ControlTypeSchema = {
    enum: [10, 20, 30, 40],
    type: 'integer',
    description: '控制策略',
    format: 'int32',
    'x-enumNames': ['Aggregate', 'Entity', 'Enum', 'Global'],
    'x-enum-varnames': ['Aggregate', 'Entity', 'Enum', 'Global']
} as const;

export const ControllerApiDescriptionModelSchema = {
    type: 'object',
    properties: {
        controllerName: {
            type: 'string',
            nullable: true
        },
        controllerGroupName: {
            type: 'string',
            nullable: true
        },
        isRemoteService: {
            type: 'boolean'
        },
        isIntegrationService: {
            type: 'boolean'
        },
        apiVersion: {
            type: 'string',
            nullable: true
        },
        type: {
            type: 'string',
            nullable: true
        },
        interfaces: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ControllerInterfaceApiDescriptionModel'
            },
            nullable: true
        },
        actions: {
            type: 'object',
            additionalProperties: {
                '$ref': '#/components/schemas/ActionApiDescriptionModel'
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const ControllerInterfaceApiDescriptionModelSchema = {
    type: 'object',
    properties: {
        type: {
            type: 'string',
            nullable: true
        },
        name: {
            type: 'string',
            nullable: true
        },
        methods: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/InterfaceMethodApiDescriptionModel'
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const CopyTemplateInputSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        name: {
            type: 'string',
            description: '名称',
            nullable: true
        },
        remark: {
            type: 'string',
            description: '备注',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const CreateAggregateInputSchema = {
    required: ['code', 'description'],
    type: 'object',
    properties: {
        projectId: {
            type: 'string',
            format: 'uuid'
        },
        code: {
            minLength: 1,
            type: 'string',
            description: '编码'
        },
        description: {
            minLength: 1,
            type: 'string',
            description: '描述'
        }
    },
    additionalProperties: false
} as const;

export const CreateDataDictinaryDetailInputSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        code: {
            type: 'string',
            nullable: true
        },
        displayText: {
            type: 'string',
            nullable: true
        },
        description: {
            type: 'string',
            nullable: true
        },
        order: {
            type: 'integer',
            format: 'int32'
        }
    },
    additionalProperties: false
} as const;

export const CreateDataDictinaryInputSchema = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            nullable: true
        },
        displayText: {
            type: 'string',
            nullable: true
        },
        description: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const CreateEntityModelInputSchema = {
    required: ['code', 'description'],
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        code: {
            minLength: 1,
            type: 'string',
            description: '编码'
        },
        description: {
            minLength: 1,
            type: 'string',
            description: '描述'
        },
        relationalType: {
            '$ref': '#/components/schemas/RelationalType'
        }
    },
    additionalProperties: false
} as const;

export const CreateEntityModelPropertyInputSchema = {
    required: ['code', 'description'],
    type: 'object',
    properties: {
        id: {
            type: 'string',
            description: '实体模型Id',
            format: 'uuid'
        },
        code: {
            minLength: 1,
            type: 'string',
            description: '编码'
        },
        description: {
            minLength: 1,
            type: 'string',
            description: '描述'
        },
        isRequired: {
            type: 'boolean',
            description: '必填'
        },
        maxLength: {
            type: 'integer',
            description: '字符串最大长度',
            format: 'int32',
            nullable: true
        },
        minLength: {
            type: 'integer',
            description: '字符串最小长度',
            format: 'int32',
            nullable: true
        },
        decimalPrecision: {
            type: 'integer',
            description: '当类型为decimal时的小数位数 (18,4) 中的18',
            format: 'int32',
            nullable: true
        },
        decimalScale: {
            type: 'integer',
            description: '当类型为decimal时的字段长度 (18,4) 中的4',
            format: 'int32',
            nullable: true
        },
        enumTypeId: {
            type: 'string',
            description: '枚举类型Id',
            format: 'uuid',
            nullable: true
        },
        dataTypeId: {
            type: 'string',
            description: '数据类型Id',
            format: 'uuid',
            nullable: true
        },
        allowSearch: {
            type: 'boolean',
            description: '允许作为查询条件'
        },
        allowAdd: {
            type: 'boolean',
            description: '允许添加'
        },
        allowEdit: {
            type: 'boolean',
            description: '允许编辑'
        }
    },
    additionalProperties: false
} as const;

export const CreateEnumTypeInputSchema = {
    required: ['code', 'description'],
    type: 'object',
    properties: {
        code: {
            minLength: 1,
            type: 'string',
            description: '编码'
        },
        description: {
            minLength: 1,
            type: 'string',
            description: '描述'
        },
        entityModelId: {
            type: 'string',
            description: '实体模型Id',
            format: 'uuid'
        },
        projectId: {
            type: 'string',
            format: 'uuid'
        }
    },
    additionalProperties: false
} as const;

export const CreateEnumTypePropertyInputSchema = {
    required: ['code', 'description'],
    type: 'object',
    properties: {
        enumTypeId: {
            type: 'string',
            description: 'Id',
            format: 'uuid'
        },
        code: {
            minLength: 1,
            type: 'string',
            description: '编码'
        },
        value: {
            type: 'integer',
            description: '枚举值',
            format: 'int32'
        },
        description: {
            minLength: 1,
            type: 'string',
            description: '描述'
        }
    },
    additionalProperties: false
} as const;

export const CreateLanguageInputSchema = {
    type: 'object',
    properties: {
        cultureName: {
            type: 'string',
            description: '语言名称',
            nullable: true
        },
        uiCultureName: {
            type: 'string',
            description: 'Ui语言名称',
            nullable: true
        },
        displayName: {
            type: 'string',
            description: '显示名称',
            nullable: true
        },
        flagIcon: {
            type: 'string',
            description: '图标',
            nullable: true
        },
        isEnabled: {
            type: 'boolean',
            description: '是否启用'
        }
    },
    additionalProperties: false,
    description: '创建语言'
} as const;

export const CreateLanguageTextInputSchema = {
    type: 'object',
    properties: {
        resourceName: {
            type: 'string',
            description: '资源名称',
            nullable: true
        },
        cultureName: {
            type: 'string',
            description: '语言名称',
            nullable: true
        },
        name: {
            type: 'string',
            description: '名称',
            nullable: true
        },
        value: {
            type: 'string',
            description: '值',
            nullable: true
        }
    },
    additionalProperties: false,
    description: '创建语言文本'
} as const;

export const CreateOrganizationUnitInputSchema = {
    type: 'object',
    properties: {
        displayName: {
            type: 'string',
            nullable: true
        },
        parentId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const CreateProjectInputSchema = {
    type: 'object',
    properties: {
        owner: {
            type: 'string',
            description: '负责人',
            nullable: true
        },
        companyName: {
            type: 'string',
            description: '公司名称',
            nullable: true
        },
        projectName: {
            type: 'string',
            description: '项目名称',
            nullable: true
        },
        remark: {
            type: 'string',
            description: '备注',
            nullable: true
        },
        supportTenant: {
            type: 'boolean',
            description: '是否支持多租户'
        }
    },
    additionalProperties: false
} as const;

export const CreateTemplateDetailInputSchema = {
    type: 'object',
    properties: {
        templateId: {
            type: 'string',
            description: '模板id',
            format: 'uuid'
        },
        parentId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        templateType: {
            '$ref': '#/components/schemas/TemplateType'
        },
        controlType: {
            '$ref': '#/components/schemas/ControlType'
        },
        name: {
            type: 'string',
            description: '模板类型',
            nullable: true
        },
        description: {
            type: 'string',
            description: '描述',
            nullable: true
        },
        content: {
            type: 'string',
            description: '模板内容',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const CreateTemplateInputSchema = {
    type: 'object',
    properties: {
        name: {
            type: 'string',
            description: '名称',
            nullable: true
        },
        remark: {
            type: 'string',
            description: '备注',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const CreateTextTemplateInputSchema = {
    required: ['code', 'content', 'cultureName', 'name'],
    type: 'object',
    properties: {
        name: {
            minLength: 1,
            type: 'string',
            description: '名称'
        },
        code: {
            minLength: 1,
            type: 'string',
            description: '编码'
        },
        content: {
            minLength: 1,
            type: 'string',
            description: '内容'
        },
        cultureName: {
            minLength: 1,
            type: 'string',
            description: '语言'
        }
    },
    additionalProperties: false,
    description: '创建模板'
} as const;

export const CurrentCultureDtoSchema = {
    type: 'object',
    properties: {
        displayName: {
            type: 'string',
            nullable: true
        },
        englishName: {
            type: 'string',
            nullable: true
        },
        threeLetterIsoLanguageName: {
            type: 'string',
            nullable: true
        },
        twoLetterIsoLanguageName: {
            type: 'string',
            nullable: true
        },
        isRightToLeft: {
            type: 'boolean'
        },
        cultureName: {
            type: 'string',
            nullable: true
        },
        name: {
            type: 'string',
            nullable: true
        },
        nativeName: {
            type: 'string',
            nullable: true
        },
        dateTimeFormat: {
            '$ref': '#/components/schemas/DateTimeFormatDto'
        }
    },
    additionalProperties: false
} as const;

export const CurrentTenantDtoSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        name: {
            type: 'string',
            nullable: true
        },
        isAvailable: {
            type: 'boolean'
        }
    },
    additionalProperties: false
} as const;

export const CurrentUserDtoSchema = {
    type: 'object',
    properties: {
        isAuthenticated: {
            type: 'boolean'
        },
        id: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        tenantId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        impersonatorUserId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        impersonatorTenantId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        impersonatorUserName: {
            type: 'string',
            nullable: true
        },
        impersonatorTenantName: {
            type: 'string',
            nullable: true
        },
        userName: {
            type: 'string',
            nullable: true
        },
        name: {
            type: 'string',
            nullable: true
        },
        surName: {
            type: 'string',
            nullable: true
        },
        email: {
            type: 'string',
            nullable: true
        },
        emailVerified: {
            type: 'boolean'
        },
        phoneNumber: {
            type: 'string',
            nullable: true
        },
        phoneNumberVerified: {
            type: 'boolean'
        },
        roles: {
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: true
        },
        sessionId: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const DataTypeDtoSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        code: {
            type: 'string',
            description: '编码',
            nullable: true
        },
        description: {
            type: 'string',
            description: '描述',
            nullable: true
        },
        isEnum: {
            type: 'boolean',
            description: '是否是枚举'
        }
    },
    additionalProperties: false
} as const;

export const DateTimeFormatDtoSchema = {
    type: 'object',
    properties: {
        calendarAlgorithmType: {
            type: 'string',
            nullable: true
        },
        dateTimeFormatLong: {
            type: 'string',
            nullable: true
        },
        shortDatePattern: {
            type: 'string',
            nullable: true
        },
        fullDateTimePattern: {
            type: 'string',
            nullable: true
        },
        dateSeparator: {
            type: 'string',
            nullable: true
        },
        shortTimePattern: {
            type: 'string',
            nullable: true
        },
        longTimePattern: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const DeleteAggregateInputSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        }
    },
    additionalProperties: false
} as const;

export const DeleteConnectionStringInputSchema = {
    type: 'object',
    properties: {
        name: {
            type: 'string',
            description: '连接字符串名称',
            nullable: true
        },
        tenantId: {
            type: 'string',
            description: '租户id',
            format: 'uuid'
        }
    },
    additionalProperties: false
} as const;

export const DeleteDataDictionaryDetailInputSchema = {
    type: 'object',
    properties: {
        dataDictionaryId: {
            type: 'string',
            format: 'uuid'
        },
        dataDictionayDetailId: {
            type: 'string',
            format: 'uuid'
        }
    },
    additionalProperties: false
} as const;

export const DeleteEntityModelInputSchema = {
    type: 'object',
    properties: {
        aggregateId: {
            type: 'string',
            format: 'uuid'
        },
        id: {
            type: 'string',
            format: 'uuid'
        }
    },
    additionalProperties: false
} as const;

export const DeleteEntityModelPropertyInputSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        propertyId: {
            type: 'string',
            format: 'uuid'
        }
    },
    additionalProperties: false
} as const;

export const DeleteEnumTypeInputSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            description: 'Id',
            format: 'uuid'
        },
        entityModelId: {
            type: 'string',
            format: 'uuid'
        }
    },
    additionalProperties: false
} as const;

export const DeleteEnumTypePropertyInputSchema = {
    type: 'object',
    properties: {
        enumTypeId: {
            type: 'string',
            description: 'Id',
            format: 'uuid'
        },
        id: {
            type: 'string',
            description: 'Id',
            format: 'uuid'
        }
    },
    additionalProperties: false
} as const;

export const DeleteFeatureInputSchema = {
    type: 'object',
    properties: {
        providerName: {
            type: 'string',
            nullable: true
        },
        providerKey: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const DeleteLanguageInputSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            description: '语言Id',
            format: 'uuid'
        }
    },
    additionalProperties: false,
    description: '删除语言'
} as const;

export const DeleteProjectInputSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        }
    },
    additionalProperties: false
} as const;

export const DeleteTemplateDetailInputSchema = {
    type: 'object',
    properties: {
        templateId: {
            type: 'string',
            format: 'uuid'
        },
        templateDetailId: {
            type: 'string',
            format: 'uuid'
        }
    },
    additionalProperties: false
} as const;

export const DeleteTemplateInputSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        }
    },
    additionalProperties: false
} as const;

export const DeleteTextTemplateInputSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            description: '模板Id',
            format: 'uuid'
        }
    },
    additionalProperties: false,
    description: '删除模板'
} as const;

export const DisabledTwoFactorInputSchema = {
    required: ['code'],
    type: 'object',
    properties: {
        code: {
            minLength: 1,
            type: 'string',
            description: '验证码'
        }
    },
    additionalProperties: false
} as const;

export const DownCodeInputSchema = {
    type: 'object',
    properties: {
        templateId: {
            type: 'string',
            format: 'uuid'
        },
        projectId: {
            type: 'string',
            format: 'uuid'
        }
    },
    additionalProperties: false
} as const;

export const EnabledTwoFactorInputSchema = {
    required: ['code', 'secret'],
    type: 'object',
    properties: {
        code: {
            minLength: 1,
            type: 'string',
            description: '验证码'
        },
        secret: {
            minLength: 1,
            type: 'string',
            description: '密钥'
        }
    },
    additionalProperties: false
} as const;

export const EntityChangeTypeSchema = {
    enum: [0, 1, 2],
    type: 'integer',
    format: 'int32',
    'x-enumNames': ['Created', 'Updated', 'Deleted'],
    'x-enum-varnames': ['Created', 'Updated', 'Deleted']
} as const;

export const EntityExtensionDtoSchema = {
    type: 'object',
    properties: {
        properties: {
            type: 'object',
            additionalProperties: {
                '$ref': '#/components/schemas/ExtensionPropertyDto'
            },
            nullable: true
        },
        configuration: {
            type: 'object',
            additionalProperties: {},
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const ExtensionEnumDtoSchema = {
    type: 'object',
    properties: {
        fields: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ExtensionEnumFieldDto'
            },
            nullable: true
        },
        localizationResource: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const ExtensionEnumFieldDtoSchema = {
    type: 'object',
    properties: {
        name: {
            type: 'string',
            nullable: true
        },
        value: {
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const ExtensionPropertyApiCreateDtoSchema = {
    type: 'object',
    properties: {
        isAvailable: {
            type: 'boolean'
        }
    },
    additionalProperties: false
} as const;

export const ExtensionPropertyApiDtoSchema = {
    type: 'object',
    properties: {
        onGet: {
            '$ref': '#/components/schemas/ExtensionPropertyApiGetDto'
        },
        onCreate: {
            '$ref': '#/components/schemas/ExtensionPropertyApiCreateDto'
        },
        onUpdate: {
            '$ref': '#/components/schemas/ExtensionPropertyApiUpdateDto'
        }
    },
    additionalProperties: false
} as const;

export const ExtensionPropertyApiGetDtoSchema = {
    type: 'object',
    properties: {
        isAvailable: {
            type: 'boolean'
        }
    },
    additionalProperties: false
} as const;

export const ExtensionPropertyApiUpdateDtoSchema = {
    type: 'object',
    properties: {
        isAvailable: {
            type: 'boolean'
        }
    },
    additionalProperties: false
} as const;

export const ExtensionPropertyAttributeDtoSchema = {
    type: 'object',
    properties: {
        typeSimple: {
            type: 'string',
            nullable: true
        },
        config: {
            type: 'object',
            additionalProperties: {},
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const ExtensionPropertyDtoSchema = {
    type: 'object',
    properties: {
        type: {
            type: 'string',
            nullable: true
        },
        typeSimple: {
            type: 'string',
            nullable: true
        },
        displayName: {
            '$ref': '#/components/schemas/LocalizableStringDto'
        },
        api: {
            '$ref': '#/components/schemas/ExtensionPropertyApiDto'
        },
        ui: {
            '$ref': '#/components/schemas/ExtensionPropertyUiDto'
        },
        attributes: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ExtensionPropertyAttributeDto'
            },
            nullable: true
        },
        configuration: {
            type: 'object',
            additionalProperties: {},
            nullable: true
        },
        defaultValue: {
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const ExtensionPropertyUiDtoSchema = {
    type: 'object',
    properties: {
        onTable: {
            '$ref': '#/components/schemas/ExtensionPropertyUiTableDto'
        },
        onCreateForm: {
            '$ref': '#/components/schemas/ExtensionPropertyUiFormDto'
        },
        onEditForm: {
            '$ref': '#/components/schemas/ExtensionPropertyUiFormDto'
        },
        lookup: {
            '$ref': '#/components/schemas/ExtensionPropertyUiLookupDto'
        }
    },
    additionalProperties: false
} as const;

export const ExtensionPropertyUiFormDtoSchema = {
    type: 'object',
    properties: {
        isVisible: {
            type: 'boolean'
        }
    },
    additionalProperties: false
} as const;

export const ExtensionPropertyUiLookupDtoSchema = {
    type: 'object',
    properties: {
        url: {
            type: 'string',
            nullable: true
        },
        resultListPropertyName: {
            type: 'string',
            nullable: true
        },
        displayPropertyName: {
            type: 'string',
            nullable: true
        },
        valuePropertyName: {
            type: 'string',
            nullable: true
        },
        filterParamName: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const ExtensionPropertyUiTableDtoSchema = {
    type: 'object',
    properties: {
        isVisible: {
            type: 'boolean'
        }
    },
    additionalProperties: false
} as const;

export const FeatureDtoSchema = {
    type: 'object',
    properties: {
        name: {
            type: 'string',
            nullable: true
        },
        displayName: {
            type: 'string',
            nullable: true
        },
        value: {
            type: 'string',
            nullable: true
        },
        provider: {
            '$ref': '#/components/schemas/FeatureProviderDto'
        },
        description: {
            type: 'string',
            nullable: true
        },
        valueType: {
            '$ref': '#/components/schemas/IStringValueType'
        },
        depth: {
            type: 'integer',
            format: 'int32'
        },
        parentName: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const FeatureGroupDtoSchema = {
    type: 'object',
    properties: {
        name: {
            type: 'string',
            nullable: true
        },
        displayName: {
            type: 'string',
            nullable: true
        },
        features: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/FeatureDto'
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const FeatureProviderDtoSchema = {
    type: 'object',
    properties: {
        name: {
            type: 'string',
            nullable: true
        },
        key: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const FileAggregateRouteSchema = {
    type: 'object',
    properties: {
        routeKeys: {
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: true
        },
        routeKeysConfig: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/AggregateRouteConfig'
            },
            nullable: true
        },
        upstreamPathTemplate: {
            type: 'string',
            nullable: true
        },
        upstreamHost: {
            type: 'string',
            nullable: true
        },
        routeIsCaseSensitive: {
            type: 'boolean'
        },
        aggregator: {
            type: 'string',
            nullable: true
        },
        upstreamHttpMethod: {
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: true,
            readOnly: true
        },
        priority: {
            type: 'integer',
            format: 'int32'
        }
    },
    additionalProperties: false
} as const;

export const FileAuthenticationOptionsSchema = {
    type: 'object',
    properties: {
        authenticationProviderKey: {
            type: 'string',
            nullable: true
        },
        allowedScopes: {
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const FileCacheOptionsSchema = {
    type: 'object',
    properties: {
        ttlSeconds: {
            type: 'integer',
            format: 'int32'
        },
        region: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const FileConfigurationSchema = {
    type: 'object',
    properties: {
        routes: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/FileRoute'
            },
            nullable: true
        },
        dynamicRoutes: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/FileDynamicRoute'
            },
            nullable: true
        },
        aggregates: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/FileAggregateRoute'
            },
            nullable: true
        },
        globalConfiguration: {
            '$ref': '#/components/schemas/FileGlobalConfiguration'
        }
    },
    additionalProperties: false
} as const;

export const FileDynamicRouteSchema = {
    type: 'object',
    properties: {
        serviceName: {
            type: 'string',
            nullable: true
        },
        rateLimitRule: {
            '$ref': '#/components/schemas/FileRateLimitRule'
        },
        downstreamHttpVersion: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const FileGlobalConfigurationSchema = {
    type: 'object',
    properties: {
        requestIdKey: {
            type: 'string',
            nullable: true
        },
        serviceDiscoveryProvider: {
            '$ref': '#/components/schemas/FileServiceDiscoveryProvider'
        },
        rateLimitOptions: {
            '$ref': '#/components/schemas/FileRateLimitOptions'
        },
        qoSOptions: {
            '$ref': '#/components/schemas/FileQoSOptions'
        },
        baseUrl: {
            type: 'string',
            nullable: true
        },
        loadBalancerOptions: {
            '$ref': '#/components/schemas/FileLoadBalancerOptions'
        },
        downstreamScheme: {
            type: 'string',
            nullable: true
        },
        httpHandlerOptions: {
            '$ref': '#/components/schemas/FileHttpHandlerOptions'
        },
        downstreamHttpVersion: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const FileHostAndPortSchema = {
    type: 'object',
    properties: {
        host: {
            type: 'string',
            nullable: true
        },
        port: {
            type: 'integer',
            format: 'int32'
        }
    },
    additionalProperties: false
} as const;

export const FileHttpHandlerOptionsSchema = {
    type: 'object',
    properties: {
        allowAutoRedirect: {
            type: 'boolean'
        },
        useCookieContainer: {
            type: 'boolean'
        },
        useTracing: {
            type: 'boolean'
        },
        useProxy: {
            type: 'boolean'
        },
        maxConnectionsPerServer: {
            type: 'integer',
            format: 'int32'
        }
    },
    additionalProperties: false
} as const;

export const FileLoadBalancerOptionsSchema = {
    type: 'object',
    properties: {
        type: {
            type: 'string',
            nullable: true
        },
        key: {
            type: 'string',
            nullable: true
        },
        expiry: {
            type: 'integer',
            format: 'int32'
        }
    },
    additionalProperties: false
} as const;

export const FileQoSOptionsSchema = {
    type: 'object',
    properties: {
        exceptionsAllowedBeforeBreaking: {
            type: 'integer',
            format: 'int32'
        },
        durationOfBreak: {
            type: 'integer',
            format: 'int32'
        },
        timeoutValue: {
            type: 'integer',
            format: 'int32'
        }
    },
    additionalProperties: false
} as const;

export const FileRateLimitOptionsSchema = {
    type: 'object',
    properties: {
        clientIdHeader: {
            type: 'string',
            nullable: true
        },
        quotaExceededMessage: {
            type: 'string',
            nullable: true
        },
        rateLimitCounterPrefix: {
            type: 'string',
            nullable: true
        },
        disableRateLimitHeaders: {
            type: 'boolean'
        },
        httpStatusCode: {
            type: 'integer',
            format: 'int32'
        }
    },
    additionalProperties: false
} as const;

export const FileRateLimitRuleSchema = {
    type: 'object',
    properties: {
        clientWhitelist: {
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: true
        },
        enableRateLimiting: {
            type: 'boolean'
        },
        period: {
            type: 'string',
            nullable: true
        },
        periodTimespan: {
            type: 'number',
            format: 'double'
        },
        limit: {
            type: 'integer',
            format: 'int64'
        }
    },
    additionalProperties: false
} as const;

export const FileRouteSchema = {
    type: 'object',
    properties: {
        downstreamPathTemplate: {
            type: 'string',
            nullable: true
        },
        upstreamPathTemplate: {
            type: 'string',
            nullable: true
        },
        upstreamHttpMethod: {
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: true
        },
        downstreamHttpMethod: {
            type: 'string',
            nullable: true
        },
        addHeadersToRequest: {
            type: 'object',
            additionalProperties: {
                type: 'string',
                nullable: true
            },
            nullable: true
        },
        upstreamHeaderTransform: {
            type: 'object',
            additionalProperties: {
                type: 'string',
                nullable: true
            },
            nullable: true
        },
        downstreamHeaderTransform: {
            type: 'object',
            additionalProperties: {
                type: 'string',
                nullable: true
            },
            nullable: true
        },
        addClaimsToRequest: {
            type: 'object',
            additionalProperties: {
                type: 'string',
                nullable: true
            },
            nullable: true
        },
        routeClaimsRequirement: {
            type: 'object',
            additionalProperties: {
                type: 'string',
                nullable: true
            },
            nullable: true
        },
        addQueriesToRequest: {
            type: 'object',
            additionalProperties: {
                type: 'string',
                nullable: true
            },
            nullable: true
        },
        changeDownstreamPathTemplate: {
            type: 'object',
            additionalProperties: {
                type: 'string',
                nullable: true
            },
            nullable: true
        },
        requestIdKey: {
            type: 'string',
            nullable: true
        },
        fileCacheOptions: {
            '$ref': '#/components/schemas/FileCacheOptions'
        },
        routeIsCaseSensitive: {
            type: 'boolean'
        },
        serviceName: {
            type: 'string',
            nullable: true
        },
        serviceNamespace: {
            type: 'string',
            nullable: true
        },
        downstreamScheme: {
            type: 'string',
            nullable: true
        },
        qoSOptions: {
            '$ref': '#/components/schemas/FileQoSOptions'
        },
        loadBalancerOptions: {
            '$ref': '#/components/schemas/FileLoadBalancerOptions'
        },
        rateLimitOptions: {
            '$ref': '#/components/schemas/FileRateLimitRule'
        },
        authenticationOptions: {
            '$ref': '#/components/schemas/FileAuthenticationOptions'
        },
        httpHandlerOptions: {
            '$ref': '#/components/schemas/FileHttpHandlerOptions'
        },
        downstreamHostAndPorts: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/FileHostAndPort'
            },
            nullable: true
        },
        upstreamHost: {
            type: 'string',
            nullable: true
        },
        key: {
            type: 'string',
            nullable: true
        },
        delegatingHandlers: {
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: true
        },
        priority: {
            type: 'integer',
            format: 'int32'
        },
        timeout: {
            type: 'integer',
            format: 'int32'
        },
        dangerousAcceptAnyServerCertificateValidator: {
            type: 'boolean'
        },
        securityOptions: {
            '$ref': '#/components/schemas/FileSecurityOptions'
        },
        downstreamHttpVersion: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const FileSecurityOptionsSchema = {
    type: 'object',
    properties: {
        ipAllowedList: {
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: true
        },
        ipBlockedList: {
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const FileServiceDiscoveryProviderSchema = {
    type: 'object',
    properties: {
        scheme: {
            type: 'string',
            nullable: true
        },
        host: {
            type: 'string',
            nullable: true
        },
        port: {
            type: 'integer',
            format: 'int32'
        },
        type: {
            type: 'string',
            nullable: true
        },
        token: {
            type: 'string',
            nullable: true
        },
        configurationKey: {
            type: 'string',
            nullable: true
        },
        pollingInterval: {
            type: 'integer',
            format: 'int32'
        },
        namespace: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const FindByUserNameInputSchema = {
    type: 'object',
    properties: {
        userName: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const FindTenantByNameInputSchema = {
    type: 'object',
    properties: {
        name: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const FindTenantResultDtoSchema = {
    type: 'object',
    properties: {
        success: {
            type: 'boolean'
        },
        tenantId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        name: {
            type: 'string',
            nullable: true
        },
        normalizedName: {
            type: 'string',
            nullable: true
        },
        isActive: {
            type: 'boolean'
        }
    },
    additionalProperties: false
} as const;

export const GetDataTypeInputSchema = {
    type: 'object',
    properties: {
        entityModelId: {
            type: 'string',
            format: 'uuid'
        }
    },
    additionalProperties: false
} as const;

export const GetDataTypeOutputSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        code: {
            type: 'string',
            description: '枚举编码',
            nullable: true
        },
        description: {
            type: 'string',
            description: '枚举描述',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const GetEntityModelInputSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        }
    },
    additionalProperties: false
} as const;

export const GetEntityModelOutputSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        code: {
            type: 'string',
            description: '编码',
            nullable: true
        },
        description: {
            type: 'string',
            description: '描述',
            nullable: true
        },
        relationalType: {
            '$ref': '#/components/schemas/RelationalType'
        },
        entityModelProperties: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GetEntityModelPropertyOutput'
            },
            description: '实体模型属性集合',
            nullable: true
        },
        entityModelOutputs: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GetEntityModelOutput'
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const GetEntityModelPropertyOutputSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        code: {
            type: 'string',
            description: '名称',
            nullable: true
        },
        description: {
            type: 'string',
            description: '描述',
            nullable: true
        },
        isRequired: {
            type: 'boolean',
            description: '必填'
        },
        maxLength: {
            type: 'integer',
            description: '字符串最大长度',
            format: 'int32',
            nullable: true
        },
        minLength: {
            type: 'integer',
            description: '字符串最小长度',
            format: 'int32',
            nullable: true
        },
        decimalPrecision: {
            type: 'integer',
            description: '当类型为decimal时的小数位数 (18,4) 中的18',
            format: 'int32',
            nullable: true
        },
        decimalScale: {
            type: 'integer',
            description: '当类型为decimal时的字段长度 (18,4) 中的4',
            format: 'int32',
            nullable: true
        },
        enumTypeId: {
            type: 'string',
            description: '枚举类型Id',
            format: 'uuid',
            nullable: true
        },
        isEnum: {
            type: 'boolean'
        },
        enumTypeOutput: {
            '$ref': '#/components/schemas/GetEnumTypeOutput'
        },
        dataTypeId: {
            type: 'string',
            description: '数据类型Id',
            format: 'uuid',
            nullable: true
        },
        dataTypeOutput: {
            '$ref': '#/components/schemas/GetDataTypeOutput'
        },
        entityModelId: {
            type: 'string',
            description: '实体模型Id',
            format: 'uuid'
        }
    },
    additionalProperties: false
} as const;

export const GetEntityModelTreeInputSchema = {
    type: 'object',
    properties: {
        projectId: {
            type: 'string',
            format: 'uuid'
        }
    },
    additionalProperties: false
} as const;

export const GetEntityModelTreeOutputSchema = {
    type: 'object',
    properties: {
        key: {
            type: 'string',
            description: '模板id',
            format: 'uuid'
        },
        icon: {
            type: 'string',
            description: '图标',
            nullable: true
        },
        code: {
            type: 'string',
            description: '描述',
            nullable: true
        },
        title: {
            type: 'string',
            description: '描述',
            nullable: true
        },
        parentId: {
            type: 'string',
            description: '父类Id',
            format: 'uuid',
            nullable: true
        },
        description: {
            type: 'string',
            description: '描述',
            nullable: true
        },
        relationalType: {
            '$ref': '#/components/schemas/RelationalType'
        },
        children: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GetEntityModelTreeOutput'
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const GetEnumTypeOutputSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        code: {
            type: 'string',
            description: '枚举编码',
            nullable: true
        },
        description: {
            type: 'string',
            description: '枚举描述',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const GetFeatureListResultDtoSchema = {
    type: 'object',
    properties: {
        groups: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/FeatureGroupDto'
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const GetFeatureListResultInputSchema = {
    type: 'object',
    properties: {
        providerName: {
            type: 'string',
            nullable: true
        },
        providerKey: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const GetOrganizationUnitRoleInputSchema = {
    type: 'object',
    properties: {
        pageIndex: {
            type: 'integer',
            description: '当前页面.默认从1开始',
            format: 'int32'
        },
        pageSize: {
            type: 'integer',
            description: '每页多少条.每页显示多少记录',
            format: 'int32'
        },
        skipCount: {
            type: 'integer',
            description: '跳过多少条',
            format: 'int32',
            readOnly: true
        },
        organizationUnitId: {
            type: 'string',
            format: 'uuid'
        }
    },
    additionalProperties: false
} as const;

export const GetOrganizationUnitRoleOutputSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        name: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const GetOrganizationUnitRoleOutputPagedResultDtoSchema = {
    type: 'object',
    properties: {
        items: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GetOrganizationUnitRoleOutput'
            },
            nullable: true
        },
        totalCount: {
            type: 'integer',
            format: 'int64'
        }
    },
    additionalProperties: false
} as const;

export const GetOrganizationUnitUserInputSchema = {
    type: 'object',
    properties: {
        pageIndex: {
            type: 'integer',
            description: '当前页面.默认从1开始',
            format: 'int32'
        },
        pageSize: {
            type: 'integer',
            description: '每页多少条.每页显示多少记录',
            format: 'int32'
        },
        skipCount: {
            type: 'integer',
            description: '跳过多少条',
            format: 'int32',
            readOnly: true
        },
        organizationUnitId: {
            type: 'string',
            format: 'uuid'
        },
        filter: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const GetOrganizationUnitUserOutputSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        userName: {
            type: 'string',
            nullable: true
        },
        email: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const GetOrganizationUnitUserOutputPagedResultDtoSchema = {
    type: 'object',
    properties: {
        items: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GetOrganizationUnitUserOutput'
            },
            nullable: true
        },
        totalCount: {
            type: 'integer',
            format: 'int64'
        }
    },
    additionalProperties: false
} as const;

export const GetPermissionInputSchema = {
    type: 'object',
    properties: {
        providerName: {
            type: 'string',
            nullable: true
        },
        providerKey: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const GetQRCodeOutputSchema = {
    type: 'object',
    properties: {
        qrCode: {
            type: 'string',
            description: 'base64 二维码',
            format: 'byte',
            nullable: true
        },
        secret: {
            type: 'string',
            description: '密钥',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const GetTemplateTreeOutputSchema = {
    type: 'object',
    properties: {
        key: {
            type: 'string',
            description: '模板id',
            format: 'uuid'
        },
        templateType: {
            '$ref': '#/components/schemas/TemplateType'
        },
        controlType: {
            '$ref': '#/components/schemas/ControlType'
        },
        icon: {
            type: 'string',
            description: '图标',
            nullable: true
        },
        name: {
            type: 'string',
            description: '模板名称',
            nullable: true
        },
        description: {
            type: 'string',
            description: '描述',
            nullable: true
        },
        title: {
            type: 'string',
            description: '描述',
            nullable: true
        },
        content: {
            type: 'string',
            description: '模板内容',
            nullable: true
        },
        children: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GetTemplateTreeOutput'
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const GetTemplteTreeInputSchema = {
    type: 'object',
    properties: {
        templateId: {
            type: 'string',
            format: 'uuid'
        }
    },
    additionalProperties: false
} as const;

export const GetUnAddRoleInputSchema = {
    type: 'object',
    properties: {
        pageIndex: {
            type: 'integer',
            description: '当前页面.默认从1开始',
            format: 'int32'
        },
        pageSize: {
            type: 'integer',
            description: '每页多少条.每页显示多少记录',
            format: 'int32'
        },
        skipCount: {
            type: 'integer',
            description: '跳过多少条',
            format: 'int32',
            readOnly: true
        },
        organizationUnitId: {
            type: 'string',
            format: 'uuid'
        },
        filter: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const GetUnAddRoleOutputSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        name: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const GetUnAddRoleOutputPagedResultDtoSchema = {
    type: 'object',
    properties: {
        items: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GetUnAddRoleOutput'
            },
            nullable: true
        },
        totalCount: {
            type: 'integer',
            format: 'int64'
        }
    },
    additionalProperties: false
} as const;

export const GetUnAddUserInputSchema = {
    type: 'object',
    properties: {
        pageIndex: {
            type: 'integer',
            description: '当前页面.默认从1开始',
            format: 'int32'
        },
        pageSize: {
            type: 'integer',
            description: '每页多少条.每页显示多少记录',
            format: 'int32'
        },
        skipCount: {
            type: 'integer',
            description: '跳过多少条',
            format: 'int32',
            readOnly: true
        },
        organizationUnitId: {
            type: 'string',
            format: 'uuid'
        },
        filter: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const GetUnAddUserOutputSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        userName: {
            type: 'string',
            nullable: true
        },
        email: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const GetUnAddUserOutputPagedResultDtoSchema = {
    type: 'object',
    properties: {
        items: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GetUnAddUserOutput'
            },
            nullable: true
        },
        totalCount: {
            type: 'integer',
            format: 'int64'
        }
    },
    additionalProperties: false
} as const;

export const HttpStatusCodeSchema = {
    enum: [100, 101, 102, 103, 200, 201, 202, 203, 204, 205, 206, 207, 208, 226, 300, 301, 302, 303, 304, 305, 306, 307, 308, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 421, 422, 423, 424, 426, 428, 429, 431, 451, 500, 501, 502, 503, 504, 505, 506, 507, 508, 510, 511],
    type: 'integer',
    format: 'int32',
    'x-enumNames': ['Continue', 'SwitchingProtocols', 'Processing', 'EarlyHints', 'OK', 'Created', 'Accepted', 'NonAuthoritativeInformation', 'NoContent', 'ResetContent', 'PartialContent', 'MultiStatus', 'AlreadyReported', 'IMUsed', 'MultipleChoices', 'Ambiguous', 'MovedPermanently', 'Moved', 'Found', 'Redirect', 'SeeOther', 'RedirectMethod', 'NotModified', 'UseProxy', 'Unused', 'TemporaryRedirect', 'RedirectKeepVerb', 'PermanentRedirect', 'BadRequest', 'Unauthorized', 'PaymentRequired', 'Forbidden', 'NotFound', 'MethodNotAllowed', 'NotAcceptable', 'ProxyAuthenticationRequired', 'RequestTimeout', 'Conflict', 'Gone', 'LengthRequired', 'PreconditionFailed', 'RequestEntityTooLarge', 'RequestUriTooLong', 'UnsupportedMediaType', 'RequestedRangeNotSatisfiable', 'ExpectationFailed', 'MisdirectedRequest', 'UnprocessableEntity', 'UnprocessableContent', 'Locked', 'FailedDependency', 'UpgradeRequired', 'PreconditionRequired', 'TooManyRequests', 'RequestHeaderFieldsTooLarge', 'UnavailableForLegalReasons', 'InternalServerError', 'NotImplemented', 'BadGateway', 'ServiceUnavailable', 'GatewayTimeout', 'HttpVersionNotSupported', 'VariantAlsoNegotiates', 'InsufficientStorage', 'LoopDetected', 'NotExtended', 'NetworkAuthenticationRequired'],
    'x-enum-varnames': ['Continue', 'SwitchingProtocols', 'Processing', 'EarlyHints', 'OK', 'Created', 'Accepted', 'NonAuthoritativeInformation', 'NoContent', 'ResetContent', 'PartialContent', 'MultiStatus', 'AlreadyReported', 'IMUsed', 'MultipleChoices', 'Ambiguous', 'MovedPermanently', 'Moved', 'Found', 'Redirect', 'SeeOther', 'RedirectMethod', 'NotModified', 'UseProxy', 'Unused', 'TemporaryRedirect', 'RedirectKeepVerb', 'PermanentRedirect', 'BadRequest', 'Unauthorized', 'PaymentRequired', 'Forbidden', 'NotFound', 'MethodNotAllowed', 'NotAcceptable', 'ProxyAuthenticationRequired', 'RequestTimeout', 'Conflict', 'Gone', 'LengthRequired', 'PreconditionFailed', 'RequestEntityTooLarge', 'RequestUriTooLong', 'UnsupportedMediaType', 'RequestedRangeNotSatisfiable', 'ExpectationFailed', 'MisdirectedRequest', 'UnprocessableEntity', 'UnprocessableContent', 'Locked', 'FailedDependency', 'UpgradeRequired', 'PreconditionRequired', 'TooManyRequests', 'RequestHeaderFieldsTooLarge', 'UnavailableForLegalReasons', 'InternalServerError', 'NotImplemented', 'BadGateway', 'ServiceUnavailable', 'GatewayTimeout', 'HttpVersionNotSupported', 'VariantAlsoNegotiates', 'InsufficientStorage', 'LoopDetected', 'NotExtended', 'NetworkAuthenticationRequired']
} as const;

export const IStringValueTypeSchema = {
    type: 'object',
    properties: {
        name: {
            type: 'string',
            nullable: true,
            readOnly: true
        },
        properties: {
            type: 'object',
            additionalProperties: {
                nullable: true
            },
            nullable: true,
            readOnly: true
        },
        validator: {
            '$ref': '#/components/schemas/IValueValidator'
        }
    },
    additionalProperties: false
} as const;

export const IValueValidatorSchema = {
    type: 'object',
    properties: {
        name: {
            type: 'string',
            nullable: true,
            readOnly: true
        },
        properties: {
            type: 'object',
            additionalProperties: {},
            nullable: true,
            readOnly: true
        }
    },
    additionalProperties: false
} as const;

export const IanaTimeZoneSchema = {
    type: 'object',
    properties: {
        timeZoneName: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const IdInputSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        }
    },
    additionalProperties: false
} as const;

export const IdentityRoleCreateDtoSchema = {
    required: ['name'],
    type: 'object',
    properties: {
        extraProperties: {
            type: 'object',
            additionalProperties: {},
            nullable: true,
            readOnly: true
        },
        name: {
            maxLength: 256,
            minLength: 0,
            type: 'string'
        },
        isDefault: {
            type: 'boolean'
        },
        isPublic: {
            type: 'boolean'
        }
    },
    additionalProperties: false
} as const;

export const IdentityRoleDtoSchema = {
    type: 'object',
    properties: {
        extraProperties: {
            type: 'object',
            additionalProperties: {},
            nullable: true,
            readOnly: true
        },
        id: {
            type: 'string',
            format: 'uuid'
        },
        name: {
            type: 'string',
            nullable: true
        },
        isDefault: {
            type: 'boolean'
        },
        isStatic: {
            type: 'boolean'
        },
        isPublic: {
            type: 'boolean'
        },
        concurrencyStamp: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const IdentityRoleDtoListResultDtoSchema = {
    type: 'object',
    properties: {
        items: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/IdentityRoleDto'
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const IdentityRoleDtoPagedResultDtoSchema = {
    type: 'object',
    properties: {
        items: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/IdentityRoleDto'
            },
            nullable: true
        },
        totalCount: {
            type: 'integer',
            format: 'int64'
        }
    },
    additionalProperties: false
} as const;

export const IdentityRoleUpdateDtoSchema = {
    required: ['name'],
    type: 'object',
    properties: {
        extraProperties: {
            type: 'object',
            additionalProperties: {},
            nullable: true,
            readOnly: true
        },
        name: {
            maxLength: 256,
            minLength: 0,
            type: 'string'
        },
        isDefault: {
            type: 'boolean'
        },
        isPublic: {
            type: 'boolean'
        },
        concurrencyStamp: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const IdentityUserCreateDtoSchema = {
    required: ['email', 'password', 'userName'],
    type: 'object',
    properties: {
        extraProperties: {
            type: 'object',
            additionalProperties: {},
            nullable: true,
            readOnly: true
        },
        userName: {
            maxLength: 256,
            minLength: 0,
            type: 'string'
        },
        name: {
            maxLength: 64,
            minLength: 0,
            type: 'string',
            nullable: true
        },
        surname: {
            maxLength: 64,
            minLength: 0,
            type: 'string',
            nullable: true
        },
        email: {
            maxLength: 256,
            minLength: 0,
            type: 'string',
            format: 'email'
        },
        phoneNumber: {
            maxLength: 16,
            minLength: 0,
            type: 'string',
            nullable: true
        },
        isActive: {
            type: 'boolean'
        },
        lockoutEnabled: {
            type: 'boolean'
        },
        roleNames: {
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: true
        },
        password: {
            maxLength: 128,
            minLength: 0,
            type: 'string'
        }
    },
    additionalProperties: false
} as const;

export const IdentityUserDtoSchema = {
    type: 'object',
    properties: {
        extraProperties: {
            type: 'object',
            additionalProperties: {},
            nullable: true,
            readOnly: true
        },
        id: {
            type: 'string',
            format: 'uuid'
        },
        creationTime: {
            type: 'string',
            format: 'date-time'
        },
        creatorId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        lastModificationTime: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        lastModifierId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        isDeleted: {
            type: 'boolean'
        },
        deleterId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        deletionTime: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        tenantId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        userName: {
            type: 'string',
            nullable: true
        },
        name: {
            type: 'string',
            nullable: true
        },
        surname: {
            type: 'string',
            nullable: true
        },
        email: {
            type: 'string',
            nullable: true
        },
        emailConfirmed: {
            type: 'boolean'
        },
        phoneNumber: {
            type: 'string',
            nullable: true
        },
        phoneNumberConfirmed: {
            type: 'boolean'
        },
        isActive: {
            type: 'boolean'
        },
        lockoutEnabled: {
            type: 'boolean'
        },
        accessFailedCount: {
            type: 'integer',
            format: 'int32'
        },
        lockoutEnd: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        concurrencyStamp: {
            type: 'string',
            nullable: true
        },
        entityVersion: {
            type: 'integer',
            format: 'int32'
        },
        lastPasswordChangeTime: {
            type: 'string',
            format: 'date-time',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const IdentityUserUpdateDtoSchema = {
    required: ['email', 'userName'],
    type: 'object',
    properties: {
        extraProperties: {
            type: 'object',
            additionalProperties: {},
            nullable: true,
            readOnly: true
        },
        userName: {
            maxLength: 256,
            minLength: 0,
            type: 'string'
        },
        name: {
            maxLength: 64,
            minLength: 0,
            type: 'string',
            nullable: true
        },
        surname: {
            maxLength: 64,
            minLength: 0,
            type: 'string',
            nullable: true
        },
        email: {
            maxLength: 256,
            minLength: 0,
            type: 'string',
            format: 'email'
        },
        phoneNumber: {
            maxLength: 16,
            minLength: 0,
            type: 'string',
            nullable: true
        },
        isActive: {
            type: 'boolean'
        },
        lockoutEnabled: {
            type: 'boolean'
        },
        roleNames: {
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: true
        },
        password: {
            maxLength: 128,
            minLength: 0,
            type: 'string',
            nullable: true
        },
        concurrencyStamp: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const InterfaceMethodApiDescriptionModelSchema = {
    type: 'object',
    properties: {
        name: {
            type: 'string',
            nullable: true
        },
        parametersOnMethod: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/MethodParameterApiDescriptionModel'
            },
            nullable: true
        },
        returnValue: {
            '$ref': '#/components/schemas/ReturnValueApiDescriptionModel'
        }
    },
    additionalProperties: false
} as const;

export const LanguageInfoSchema = {
    type: 'object',
    properties: {
        cultureName: {
            type: 'string',
            nullable: true
        },
        uiCultureName: {
            type: 'string',
            nullable: true
        },
        displayName: {
            type: 'string',
            nullable: true
        },
        twoLetterISOLanguageName: {
            type: 'string',
            nullable: true,
            readOnly: true
        }
    },
    additionalProperties: false
} as const;

export const LocalizableStringDtoSchema = {
    type: 'object',
    properties: {
        name: {
            type: 'string',
            nullable: true
        },
        resource: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const LockUserInputSchema = {
    type: 'object',
    properties: {
        userId: {
            type: 'string',
            format: 'uuid'
        },
        locked: {
            type: 'boolean'
        }
    },
    additionalProperties: false
} as const;

export const Login2FAInputSchema = {
    type: 'object',
    properties: {
        name: {
            type: 'string',
            description: '用户名或者邮箱',
            nullable: true
        },
        password: {
            type: 'string',
            description: '密码',
            nullable: true
        },
        code: {
            type: 'string',
            description: '双因素验证码',
            nullable: true
        }
    },
    additionalProperties: false,
    description: '登录'
} as const;

export const LoginInputSchema = {
    type: 'object',
    properties: {
        name: {
            type: 'string',
            description: '用户名或者邮箱',
            nullable: true
        },
        password: {
            type: 'string',
            description: '密码',
            nullable: true
        }
    },
    additionalProperties: false,
    description: '登录'
} as const;

export const LoginOutputSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        name: {
            type: 'string',
            nullable: true
        },
        userName: {
            type: 'string',
            nullable: true
        },
        token: {
            type: 'string',
            nullable: true
        },
        roles: {
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const LoginResultTypeSchema = {
    enum: [1, 2, 3, 4, 5],
    type: 'integer',
    format: 'int32',
    'x-enumNames': ['Success', 'InvalidUserNameOrPassword', 'NotAllowed', 'LockedOut', 'RequiresTwoFactor'],
    'x-enum-varnames': ['Success', 'InvalidUserNameOrPassword', 'NotAllowed', 'LockedOut', 'RequiresTwoFactor']
} as const;

export const MessageLevelSchema = {
    enum: [10, 20, 30],
    type: 'integer',
    description: '消息等级',
    format: 'int32',
    'x-enumNames': ['Warning', 'Information', 'Error'],
    'x-enum-varnames': ['Warning', 'Information', 'Error']
} as const;

export const MessageTypeSchema = {
    enum: [10, 20],
    type: 'integer',
    description: '消息类型',
    format: 'int32',
    'x-enumNames': ['BroadCast', 'Common'],
    'x-enum-varnames': ['BroadCast', 'Common']
} as const;

export const MethodParameterApiDescriptionModelSchema = {
    type: 'object',
    properties: {
        name: {
            type: 'string',
            nullable: true
        },
        typeAsString: {
            type: 'string',
            nullable: true
        },
        type: {
            type: 'string',
            nullable: true
        },
        typeSimple: {
            type: 'string',
            nullable: true
        },
        isOptional: {
            type: 'boolean'
        },
        defaultValue: {
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const ModuleApiDescriptionModelSchema = {
    type: 'object',
    properties: {
        rootPath: {
            type: 'string',
            nullable: true
        },
        remoteServiceName: {
            type: 'string',
            nullable: true
        },
        controllers: {
            type: 'object',
            additionalProperties: {
                '$ref': '#/components/schemas/ControllerApiDescriptionModel'
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const ModuleExtensionDtoSchema = {
    type: 'object',
    properties: {
        entities: {
            type: 'object',
            additionalProperties: {
                '$ref': '#/components/schemas/EntityExtensionDto'
            },
            nullable: true
        },
        configuration: {
            type: 'object',
            additionalProperties: {},
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const MultiTenancyInfoDtoSchema = {
    type: 'object',
    properties: {
        isEnabled: {
            type: 'boolean'
        }
    },
    additionalProperties: false
} as const;

export const MyProfileOutputSchema = {
    type: 'object',
    properties: {
        tenantId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        userName: {
            type: 'string',
            nullable: true
        },
        name: {
            type: 'string',
            nullable: true
        },
        surname: {
            type: 'string',
            nullable: true
        },
        email: {
            type: 'string',
            nullable: true
        },
        phoneNumber: {
            type: 'string',
            nullable: true
        },
        isActive: {
            type: 'boolean'
        },
        twoFactorEnabled: {
            type: 'boolean'
        }
    },
    additionalProperties: false
} as const;

export const NameValueSchema = {
    type: 'object',
    properties: {
        name: {
            type: 'string',
            nullable: true
        },
        value: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const ObjectExtensionsDtoSchema = {
    type: 'object',
    properties: {
        modules: {
            type: 'object',
            additionalProperties: {
                '$ref': '#/components/schemas/ModuleExtensionDto'
            },
            nullable: true
        },
        enums: {
            type: 'object',
            additionalProperties: {
                '$ref': '#/components/schemas/ExtensionEnumDto'
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const PageEntityModelInputSchema = {
    type: 'object',
    properties: {
        pageIndex: {
            type: 'integer',
            description: '当前页面.默认从1开始',
            format: 'int32'
        },
        pageSize: {
            type: 'integer',
            description: '每页多少条.每页显示多少记录',
            format: 'int32'
        },
        skipCount: {
            type: 'integer',
            description: '跳过多少条',
            format: 'int32',
            readOnly: true
        },
        id: {
            type: 'string',
            format: 'uuid'
        },
        filter: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const PageEntityModelPropertyOutputSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        entityModelId: {
            type: 'string',
            description: '实体模型Id',
            format: 'uuid'
        },
        code: {
            type: 'string',
            description: '名称',
            nullable: true
        },
        description: {
            type: 'string',
            description: '描述',
            nullable: true
        },
        isRequired: {
            type: 'boolean',
            description: '必填'
        },
        maxLength: {
            type: 'integer',
            description: '字符串最大长度',
            format: 'int32',
            nullable: true
        },
        minLength: {
            type: 'integer',
            description: '字符串最小长度',
            format: 'int32',
            nullable: true
        },
        decimalPrecision: {
            type: 'integer',
            description: '当类型为decimal时的小数位数 (18,4) 中的18',
            format: 'int32',
            nullable: true
        },
        decimalScale: {
            type: 'integer',
            description: '当类型为decimal时的字段长度 (18,4) 中的4',
            format: 'int32',
            nullable: true
        },
        dataTypeId: {
            type: 'string',
            format: 'uuid'
        },
        isEnum: {
            type: 'boolean'
        },
        dataTypeCode: {
            type: 'string',
            nullable: true
        },
        dataTypeDescription: {
            type: 'string',
            nullable: true
        },
        allowSearch: {
            type: 'boolean',
            description: '允许作为查询条件'
        },
        allowAdd: {
            type: 'boolean',
            description: '允许添加'
        },
        allowEdit: {
            type: 'boolean',
            description: '允许编辑'
        }
    },
    additionalProperties: false
} as const;

export const PageEntityModelPropertyOutputPagedResultDtoSchema = {
    type: 'object',
    properties: {
        items: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/PageEntityModelPropertyOutput'
            },
            nullable: true
        },
        totalCount: {
            type: 'integer',
            format: 'int64'
        }
    },
    additionalProperties: false
} as const;

export const PageEnumTypeInputSchema = {
    type: 'object',
    properties: {
        pageIndex: {
            type: 'integer',
            description: '当前页面.默认从1开始',
            format: 'int32'
        },
        pageSize: {
            type: 'integer',
            description: '每页多少条.每页显示多少记录',
            format: 'int32'
        },
        skipCount: {
            type: 'integer',
            description: '跳过多少条',
            format: 'int32',
            readOnly: true
        },
        id: {
            type: 'string',
            format: 'uuid'
        },
        filter: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const PageEnumTypeOutputSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        entityModelId: {
            type: 'string',
            description: '实体模型Id',
            format: 'uuid'
        },
        code: {
            type: 'string',
            description: '名称',
            nullable: true
        },
        description: {
            type: 'string',
            description: '描述',
            nullable: true
        },
        creationTime: {
            type: 'string',
            format: 'date-time'
        }
    },
    additionalProperties: false
} as const;

export const PageEnumTypeOutputPagedResultDtoSchema = {
    type: 'object',
    properties: {
        items: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/PageEnumTypeOutput'
            },
            nullable: true
        },
        totalCount: {
            type: 'integer',
            format: 'int64'
        }
    },
    additionalProperties: false
} as const;

export const PageEnumTypePropertyInputSchema = {
    type: 'object',
    properties: {
        pageIndex: {
            type: 'integer',
            description: '当前页面.默认从1开始',
            format: 'int32'
        },
        pageSize: {
            type: 'integer',
            description: '每页多少条.每页显示多少记录',
            format: 'int32'
        },
        skipCount: {
            type: 'integer',
            description: '跳过多少条',
            format: 'int32',
            readOnly: true
        },
        id: {
            type: 'string',
            format: 'uuid'
        },
        filter: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const PageEnumTypePropertyOutputSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        code: {
            type: 'string',
            description: '名称',
            nullable: true
        },
        value: {
            type: 'integer',
            description: '名称',
            format: 'int32'
        },
        description: {
            type: 'string',
            description: '描述',
            nullable: true
        },
        creationTime: {
            type: 'string',
            format: 'date-time'
        }
    },
    additionalProperties: false
} as const;

export const PageEnumTypePropertyOutputPagedResultDtoSchema = {
    type: 'object',
    properties: {
        items: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/PageEnumTypePropertyOutput'
            },
            nullable: true
        },
        totalCount: {
            type: 'integer',
            format: 'int64'
        }
    },
    additionalProperties: false
} as const;

export const PageIdentityUserOutputSchema = {
    type: 'object',
    properties: {
        extraProperties: {
            type: 'object',
            additionalProperties: {},
            nullable: true,
            readOnly: true
        },
        id: {
            type: 'string',
            format: 'uuid'
        },
        creationTime: {
            type: 'string',
            format: 'date-time'
        },
        creatorId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        lastModificationTime: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        lastModifierId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        isDeleted: {
            type: 'boolean'
        },
        deleterId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        deletionTime: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        tenantId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        userName: {
            type: 'string',
            nullable: true
        },
        name: {
            type: 'string',
            nullable: true
        },
        surname: {
            type: 'string',
            nullable: true
        },
        email: {
            type: 'string',
            nullable: true
        },
        emailConfirmed: {
            type: 'boolean'
        },
        phoneNumber: {
            type: 'string',
            nullable: true
        },
        phoneNumberConfirmed: {
            type: 'boolean'
        },
        isActive: {
            type: 'boolean'
        },
        lockoutEnabled: {
            type: 'boolean'
        },
        accessFailedCount: {
            type: 'integer',
            format: 'int32'
        },
        lockoutEnd: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        concurrencyStamp: {
            type: 'string',
            nullable: true
        },
        entityVersion: {
            type: 'integer',
            format: 'int32'
        },
        lastPasswordChangeTime: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        twoFactorEnabled: {
            type: 'boolean',
            description: '是否开启双因素验证码'
        }
    },
    additionalProperties: false
} as const;

export const PageIdentityUserOutputPagedResultDtoSchema = {
    type: 'object',
    properties: {
        items: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/PageIdentityUserOutput'
            },
            nullable: true
        },
        totalCount: {
            type: 'integer',
            format: 'int64'
        }
    },
    additionalProperties: false
} as const;

export const PageLanguageInputSchema = {
    type: 'object',
    properties: {
        pageIndex: {
            type: 'integer',
            description: '当前页面.默认从1开始',
            format: 'int32'
        },
        pageSize: {
            type: 'integer',
            description: '每页多少条.每页显示多少记录',
            format: 'int32'
        },
        skipCount: {
            type: 'integer',
            description: '跳过多少条',
            format: 'int32',
            readOnly: true
        },
        filter: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false,
    description: '创建语言'
} as const;

export const PageLanguageOutputSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            description: '语言Id',
            format: 'uuid'
        },
        cultureName: {
            type: 'string',
            description: '语言名称',
            nullable: true
        },
        uiCultureName: {
            type: 'string',
            description: 'Ui语言名称',
            nullable: true
        },
        displayName: {
            type: 'string',
            description: '显示名称',
            nullable: true
        },
        flagIcon: {
            type: 'string',
            description: '图标',
            nullable: true
        },
        isEnabled: {
            type: 'boolean',
            description: '是否启用'
        },
        creationTime: {
            type: 'string',
            description: '创建时间',
            format: 'date-time'
        },
        isDefault: {
            type: 'boolean',
            description: '是否是默认语言'
        }
    },
    additionalProperties: false,
    description: '创建语言'
} as const;

export const PageLanguageOutputPagedResultDtoSchema = {
    type: 'object',
    properties: {
        items: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/PageLanguageOutput'
            },
            nullable: true
        },
        totalCount: {
            type: 'integer',
            format: 'int64'
        }
    },
    additionalProperties: false
} as const;

export const PageLanguageTextInputSchema = {
    type: 'object',
    properties: {
        pageIndex: {
            type: 'integer',
            description: '当前页面.默认从1开始',
            format: 'int32'
        },
        pageSize: {
            type: 'integer',
            description: '每页多少条.每页显示多少记录',
            format: 'int32'
        },
        skipCount: {
            type: 'integer',
            description: '跳过多少条',
            format: 'int32',
            readOnly: true
        },
        cultureName: {
            type: 'string',
            description: '语言',
            nullable: true
        },
        resourceName: {
            type: 'string',
            description: '资源',
            nullable: true
        },
        filter: {
            type: 'string',
            description: '查询条件 name or value',
            nullable: true
        }
    },
    additionalProperties: false,
    description: '创建语言文本'
} as const;

export const PageLanguageTextOutputSchema = {
    type: 'object',
    properties: {
        resourceName: {
            type: 'string',
            description: '资源名称',
            nullable: true
        },
        name: {
            type: 'string',
            description: '名称',
            nullable: true
        },
        value: {
            type: 'string',
            description: '值',
            nullable: true
        }
    },
    additionalProperties: false,
    description: '创建语言文本'
} as const;

export const PageLanguageTextOutputPagedResultDtoSchema = {
    type: 'object',
    properties: {
        items: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/PageLanguageTextOutput'
            },
            nullable: true
        },
        totalCount: {
            type: 'integer',
            format: 'int64'
        }
    },
    additionalProperties: false
} as const;

export const PageProjectInputSchema = {
    type: 'object',
    properties: {
        pageIndex: {
            type: 'integer',
            description: '当前页面.默认从1开始',
            format: 'int32'
        },
        pageSize: {
            type: 'integer',
            description: '每页多少条.每页显示多少记录',
            format: 'int32'
        },
        skipCount: {
            type: 'integer',
            description: '跳过多少条',
            format: 'int32',
            readOnly: true
        },
        filter: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const PageTemplateInputSchema = {
    type: 'object',
    properties: {
        pageIndex: {
            type: 'integer',
            description: '当前页面.默认从1开始',
            format: 'int32'
        },
        pageSize: {
            type: 'integer',
            description: '每页多少条.每页显示多少记录',
            format: 'int32'
        },
        skipCount: {
            type: 'integer',
            description: '跳过多少条',
            format: 'int32',
            readOnly: true
        },
        filter: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const PageTenantConnectionStringInputSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            description: '租户id',
            format: 'uuid'
        },
        name: {
            type: 'string',
            description: '连接字符串名称',
            nullable: true
        },
        value: {
            type: 'string',
            description: '连接字符串地址',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const PageTenantConnectionStringOutputSchema = {
    type: 'object',
    properties: {
        tenantId: {
            type: 'string',
            description: '租户id',
            format: 'uuid'
        },
        name: {
            type: 'string',
            description: '连接字符串名称',
            nullable: true
        },
        value: {
            type: 'string',
            description: '连接字符串地址',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const PageTenantConnectionStringOutputPagedResultDtoSchema = {
    type: 'object',
    properties: {
        items: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/PageTenantConnectionStringOutput'
            },
            nullable: true
        },
        totalCount: {
            type: 'integer',
            format: 'int64'
        }
    },
    additionalProperties: false
} as const;

export const PageTextTemplateInputSchema = {
    type: 'object',
    properties: {
        pageIndex: {
            type: 'integer',
            description: '当前页面.默认从1开始',
            format: 'int32'
        },
        pageSize: {
            type: 'integer',
            description: '每页多少条.每页显示多少记录',
            format: 'int32'
        },
        skipCount: {
            type: 'integer',
            description: '跳过多少条',
            format: 'int32',
            readOnly: true
        },
        name: {
            type: 'string',
            description: '名称',
            nullable: true
        },
        code: {
            type: 'string',
            description: '编码',
            nullable: true
        },
        content: {
            type: 'string',
            description: '内容',
            nullable: true
        },
        startCreationTime: {
            type: 'string',
            description: '开始创建时间',
            format: 'date-time',
            nullable: true
        },
        endCreationTime: {
            type: 'string',
            description: '结束创建时间',
            format: 'date-time',
            nullable: true
        }
    },
    additionalProperties: false,
    description: '分页查询模板'
} as const;

export const PageTextTemplateOutputSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            description: '模板Id',
            format: 'uuid'
        },
        name: {
            type: 'string',
            description: '名称',
            nullable: true
        },
        code: {
            type: 'string',
            description: '编码',
            nullable: true
        },
        content: {
            type: 'string',
            description: '内容',
            nullable: true
        },
        cultureName: {
            type: 'string',
            description: '语言',
            nullable: true
        },
        creationTime: {
            type: 'string',
            description: '创建时间',
            format: 'date-time'
        }
    },
    additionalProperties: false,
    description: '分页查询模板'
} as const;

export const PageTextTemplateOutputPagedResultDtoSchema = {
    type: 'object',
    properties: {
        items: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/PageTextTemplateOutput'
            },
            nullable: true
        },
        totalCount: {
            type: 'integer',
            format: 'int64'
        }
    },
    additionalProperties: false
} as const;

export const PagingAuditLogActionOutputSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        tenantId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        auditLogId: {
            type: 'string',
            format: 'uuid'
        },
        serviceName: {
            type: 'string',
            nullable: true
        },
        methodName: {
            type: 'string',
            nullable: true
        },
        parameters: {
            type: 'string',
            nullable: true
        },
        executionTime: {
            type: 'string',
            nullable: true
        },
        executionDuration: {
            type: 'integer',
            format: 'int32'
        },
        extraProperties: {
            type: 'object',
            additionalProperties: {},
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const PagingAuditLogInputSchema = {
    type: 'object',
    properties: {
        pageIndex: {
            type: 'integer',
            description: '当前页面.默认从1开始',
            format: 'int32'
        },
        pageSize: {
            type: 'integer',
            description: '每页多少条.每页显示多少记录',
            format: 'int32'
        },
        skipCount: {
            type: 'integer',
            description: '跳过多少条',
            format: 'int32',
            readOnly: true
        },
        sorting: {
            type: 'string',
            description: '排序',
            nullable: true
        },
        startTime: {
            type: 'string',
            description: '开始时间',
            format: 'date-time',
            nullable: true
        },
        endTime: {
            type: 'string',
            description: '结束时间',
            format: 'date-time',
            nullable: true
        },
        httpMethod: {
            type: 'string',
            description: '请求方法',
            nullable: true
        },
        url: {
            type: 'string',
            description: '请求地址',
            nullable: true
        },
        userId: {
            type: 'string',
            description: '用户Id',
            format: 'uuid',
            nullable: true
        },
        userName: {
            type: 'string',
            description: '用户名',
            nullable: true
        },
        applicationName: {
            type: 'string',
            description: '应用程序名称',
            nullable: true
        },
        correlationId: {
            type: 'string',
            description: 'RequestId',
            nullable: true
        },
        maxExecutionDuration: {
            type: 'integer',
            description: '最大执行时间',
            format: 'int32',
            nullable: true
        },
        minExecutionDuration: {
            type: 'integer',
            description: '最小执行时间',
            format: 'int32',
            nullable: true
        },
        hasException: {
            type: 'boolean',
            description: '是否有异常',
            nullable: true
        },
        httpStatusCode: {
            '$ref': '#/components/schemas/HttpStatusCode'
        },
        clientIpAddress: {
            type: 'string',
            description: '客户端IP',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const PagingAuditLogOutputSchema = {
    type: 'object',
    properties: {
        applicationName: {
            type: 'string',
            nullable: true
        },
        userId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        userName: {
            type: 'string',
            nullable: true
        },
        tenantId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        tenantName: {
            type: 'string',
            nullable: true
        },
        impersonatorUserId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        impersonatorTenantId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        executionTime: {
            type: 'string',
            nullable: true
        },
        executionDuration: {
            type: 'integer',
            format: 'int32'
        },
        clientIpAddress: {
            type: 'string',
            nullable: true
        },
        clientName: {
            type: 'string',
            nullable: true
        },
        clientId: {
            type: 'string',
            nullable: true
        },
        correlationId: {
            type: 'string',
            nullable: true
        },
        browserInfo: {
            type: 'string',
            nullable: true
        },
        httpMethod: {
            type: 'string',
            nullable: true
        },
        url: {
            type: 'string',
            nullable: true
        },
        exceptions: {
            type: 'string',
            nullable: true
        },
        comments: {
            type: 'string',
            nullable: true
        },
        httpStatusCode: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        entityChanges: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/PagingEntityChangeOutput'
            },
            nullable: true
        },
        actions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/PagingAuditLogActionOutput'
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const PagingAuditLogOutputPagedResultDtoSchema = {
    type: 'object',
    properties: {
        items: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/PagingAuditLogOutput'
            },
            nullable: true
        },
        totalCount: {
            type: 'integer',
            format: 'int64'
        }
    },
    additionalProperties: false
} as const;

export const PagingDataDictionaryDetailInputSchema = {
    type: 'object',
    properties: {
        pageIndex: {
            type: 'integer',
            description: '当前页面.默认从1开始',
            format: 'int32'
        },
        pageSize: {
            type: 'integer',
            description: '每页多少条.每页显示多少记录',
            format: 'int32'
        },
        skipCount: {
            type: 'integer',
            description: '跳过多少条',
            format: 'int32',
            readOnly: true
        },
        dataDictionaryId: {
            type: 'string',
            format: 'uuid'
        },
        filter: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const PagingDataDictionaryDetailOutputSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        dataDictionaryId: {
            type: 'string',
            description: '所属字典Id',
            format: 'uuid'
        },
        code: {
            type: 'string',
            description: '字典明细编码',
            nullable: true
        },
        order: {
            type: 'integer',
            description: '展现列表时排序用',
            format: 'int32'
        },
        displayText: {
            type: 'string',
            description: '英文显示名',
            nullable: true
        },
        description: {
            type: 'string',
            description: '描述',
            nullable: true
        },
        isEnabled: {
            type: 'boolean',
            description: '启/停用(默认启用)'
        }
    },
    additionalProperties: false
} as const;

export const PagingDataDictionaryDetailOutputPagedResultDtoSchema = {
    type: 'object',
    properties: {
        items: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/PagingDataDictionaryDetailOutput'
            },
            nullable: true
        },
        totalCount: {
            type: 'integer',
            format: 'int64'
        }
    },
    additionalProperties: false
} as const;

export const PagingDataDictionaryInputSchema = {
    type: 'object',
    properties: {
        pageIndex: {
            type: 'integer',
            description: '当前页面.默认从1开始',
            format: 'int32'
        },
        pageSize: {
            type: 'integer',
            description: '每页多少条.每页显示多少记录',
            format: 'int32'
        },
        skipCount: {
            type: 'integer',
            description: '跳过多少条',
            format: 'int32',
            readOnly: true
        },
        filter: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const PagingDataDictionaryOutputSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        code: {
            type: 'string',
            description: '字典编码',
            nullable: true
        },
        displayText: {
            type: 'string',
            description: '显示名',
            nullable: true
        },
        description: {
            type: 'string',
            description: '描述',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const PagingDataDictionaryOutputPagedResultDtoSchema = {
    type: 'object',
    properties: {
        items: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/PagingDataDictionaryOutput'
            },
            nullable: true
        },
        totalCount: {
            type: 'integer',
            format: 'int64'
        }
    },
    additionalProperties: false
} as const;

export const PagingEntityChangeOutputSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        auditLogId: {
            type: 'string',
            format: 'uuid'
        },
        tenantId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        changeTime: {
            type: 'string',
            nullable: true
        },
        changeType: {
            '$ref': '#/components/schemas/EntityChangeType'
        },
        changeTypeDescription: {
            type: 'string',
            nullable: true
        },
        entityTenantId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        entityId: {
            type: 'string',
            nullable: true
        },
        entityTypeFullName: {
            type: 'string',
            nullable: true
        },
        propertyChanges: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/PagingEntityPropertyChangeOutput'
            },
            nullable: true
        },
        extraProperties: {
            type: 'object',
            additionalProperties: {},
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const PagingEntityPropertyChangeOutputSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        tenantId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        entityChangeId: {
            type: 'string',
            format: 'uuid'
        },
        newValue: {
            type: 'string',
            nullable: true
        },
        originalValue: {
            type: 'string',
            nullable: true
        },
        propertyName: {
            type: 'string',
            nullable: true
        },
        propertyTypeFullName: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const PagingIdentitySecurityLogInputSchema = {
    type: 'object',
    properties: {
        pageIndex: {
            type: 'integer',
            description: '当前页面.默认从1开始',
            format: 'int32'
        },
        pageSize: {
            type: 'integer',
            description: '每页多少条.每页显示多少记录',
            format: 'int32'
        },
        skipCount: {
            type: 'integer',
            description: '跳过多少条',
            format: 'int32',
            readOnly: true
        },
        sorting: {
            type: 'string',
            description: '排序',
            nullable: true
        },
        startTime: {
            type: 'string',
            description: '开始时间',
            format: 'date-time',
            nullable: true
        },
        endTime: {
            type: 'string',
            description: '结束时间',
            format: 'date-time',
            nullable: true
        },
        identity: {
            type: 'string',
            nullable: true
        },
        action: {
            type: 'string',
            description: '请求地址',
            nullable: true
        },
        userId: {
            type: 'string',
            description: '用户Id',
            format: 'uuid',
            nullable: true
        },
        userName: {
            type: 'string',
            description: '用户名',
            nullable: true
        },
        applicationName: {
            type: 'string',
            description: '应用程序名称',
            nullable: true
        },
        correlationId: {
            type: 'string',
            description: 'RequestId',
            nullable: true
        },
        clientId: {
            type: 'string',
            description: 'ClientId',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const PagingIdentitySecurityLogOutputSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        tenantId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        applicationName: {
            type: 'string',
            nullable: true
        },
        identity: {
            type: 'string',
            nullable: true
        },
        action: {
            type: 'string',
            nullable: true
        },
        userId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        userName: {
            type: 'string',
            nullable: true
        },
        tenantName: {
            type: 'string',
            nullable: true
        },
        clientId: {
            type: 'string',
            nullable: true
        },
        correlationId: {
            type: 'string',
            nullable: true
        },
        clientIpAddress: {
            type: 'string',
            nullable: true
        },
        browserInfo: {
            type: 'string',
            nullable: true
        },
        creationTime: {
            type: 'string',
            format: 'date-time'
        }
    },
    additionalProperties: false
} as const;

export const PagingIdentitySecurityLogOutputPagedResultDtoSchema = {
    type: 'object',
    properties: {
        items: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/PagingIdentitySecurityLogOutput'
            },
            nullable: true
        },
        totalCount: {
            type: 'integer',
            format: 'int64'
        }
    },
    additionalProperties: false
} as const;

export const PagingNotificationInputSchema = {
    type: 'object',
    properties: {
        pageIndex: {
            type: 'integer',
            description: '当前页面.默认从1开始',
            format: 'int32'
        },
        pageSize: {
            type: 'integer',
            description: '每页多少条.每页显示多少记录',
            format: 'int32'
        },
        skipCount: {
            type: 'integer',
            description: '跳过多少条',
            format: 'int32',
            readOnly: true
        },
        title: {
            type: 'string',
            description: '标题',
            nullable: true
        },
        content: {
            type: 'string',
            description: '内容',
            nullable: true
        },
        senderUserId: {
            type: 'string',
            description: '发送者Id',
            format: 'uuid',
            nullable: true
        },
        senderUserName: {
            type: 'string',
            description: '发送者名称',
            nullable: true
        },
        receiverUserId: {
            type: 'string',
            description: '接受者Id',
            format: 'uuid',
            nullable: true
        },
        receiverUserName: {
            type: 'string',
            description: '接受者名称',
            nullable: true
        },
        read: {
            type: 'boolean',
            description: '是否已读',
            nullable: true
        },
        startReadTime: {
            type: 'string',
            description: '已读开始时间',
            format: 'date-time',
            nullable: true
        },
        endReadTime: {
            type: 'string',
            description: '已读结束时间',
            format: 'date-time',
            nullable: true
        },
        messageType: {
            '$ref': '#/components/schemas/MessageType'
        },
        messageLevel: {
            '$ref': '#/components/schemas/MessageLevel'
        }
    },
    additionalProperties: false
} as const;

export const PagingNotificationOutputSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        tenantId: {
            type: 'string',
            description: '租户id',
            format: 'uuid',
            nullable: true
        },
        title: {
            type: 'string',
            description: '消息标题',
            nullable: true
        },
        content: {
            type: 'string',
            description: '消息内容',
            nullable: true
        },
        messageType: {
            '$ref': '#/components/schemas/MessageType'
        },
        messageTypeName: {
            type: 'string',
            nullable: true,
            readOnly: true
        },
        messageLevel: {
            '$ref': '#/components/schemas/MessageLevel'
        },
        messageLevelName: {
            type: 'string',
            nullable: true,
            readOnly: true
        },
        senderUserId: {
            type: 'string',
            description: '发送人',
            format: 'uuid'
        },
        senderUserName: {
            type: 'string',
            description: '发送人用户名',
            nullable: true
        },
        receiveUserId: {
            type: 'string',
            description: `订阅人
消息类型是广播消息时，订阅人为空`,
            format: 'uuid',
            nullable: true
        },
        receiveUserName: {
            type: 'string',
            description: `接收人用户名
消息类型是广播消息时，订接收人用户名为空`,
            nullable: true
        },
        read: {
            type: 'boolean',
            description: '是否已读'
        },
        readTime: {
            type: 'string',
            description: '已读时间',
            format: 'date-time',
            nullable: true
        },
        creationTime: {
            type: 'string',
            format: 'date-time'
        }
    },
    additionalProperties: false
} as const;

export const PagingNotificationOutputPagedResultDtoSchema = {
    type: 'object',
    properties: {
        items: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/PagingNotificationOutput'
            },
            nullable: true
        },
        totalCount: {
            type: 'integer',
            format: 'int64'
        }
    },
    additionalProperties: false
} as const;

export const PagingNotificationSubscriptionInputSchema = {
    type: 'object',
    properties: {
        pageIndex: {
            type: 'integer',
            description: '当前页面.默认从1开始',
            format: 'int32'
        },
        pageSize: {
            type: 'integer',
            description: '每页多少条.每页显示多少记录',
            format: 'int32'
        },
        skipCount: {
            type: 'integer',
            description: '跳过多少条',
            format: 'int32',
            readOnly: true
        },
        notificationId: {
            type: 'string',
            format: 'uuid'
        },
        receiverUserId: {
            type: 'string',
            description: '接受者Id',
            format: 'uuid',
            nullable: true
        },
        receiverUserName: {
            type: 'string',
            description: '接受者名称',
            nullable: true
        },
        read: {
            type: 'boolean',
            description: '是否已读',
            nullable: true
        },
        startReadTime: {
            type: 'string',
            description: '已读开始时间',
            format: 'date-time',
            nullable: true
        },
        endReadTime: {
            type: 'string',
            description: '已读结束时间',
            format: 'date-time',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const PagingNotificationSubscriptionOutputSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        tenantId: {
            type: 'string',
            description: '租户id',
            format: 'uuid',
            nullable: true
        },
        notificationId: {
            type: 'string',
            description: '消息Id',
            format: 'uuid'
        },
        receiveUserId: {
            type: 'string',
            description: '接收人id',
            format: 'uuid'
        },
        receiveUserName: {
            type: 'string',
            description: '接收人用户名',
            nullable: true
        },
        read: {
            type: 'boolean',
            description: '是否已读'
        },
        readTime: {
            type: 'string',
            description: '已读时间',
            format: 'date-time'
        },
        title: {
            type: 'string',
            description: '消息标题',
            nullable: true
        },
        content: {
            type: 'string',
            description: '消息内容',
            nullable: true
        },
        messageType: {
            '$ref': '#/components/schemas/MessageType'
        },
        messageTypeName: {
            type: 'string',
            nullable: true,
            readOnly: true
        },
        messageLevel: {
            '$ref': '#/components/schemas/MessageLevel'
        },
        messageLevelName: {
            type: 'string',
            nullable: true,
            readOnly: true
        },
        senderUserId: {
            type: 'string',
            description: '发送人',
            format: 'uuid'
        },
        senderUserName: {
            type: 'string',
            description: '发送人用户名',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const PagingNotificationSubscriptionOutputPagedResultDtoSchema = {
    type: 'object',
    properties: {
        items: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/PagingNotificationSubscriptionOutput'
            },
            nullable: true
        },
        totalCount: {
            type: 'integer',
            format: 'int64'
        }
    },
    additionalProperties: false
} as const;

export const PagingRoleListInputSchema = {
    type: 'object',
    properties: {
        pageIndex: {
            type: 'integer',
            description: '当前页面.默认从1开始',
            format: 'int32'
        },
        pageSize: {
            type: 'integer',
            description: '每页多少条.每页显示多少记录',
            format: 'int32'
        },
        skipCount: {
            type: 'integer',
            description: '跳过多少条',
            format: 'int32',
            readOnly: true
        },
        filter: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const PagingTenantInputSchema = {
    type: 'object',
    properties: {
        pageIndex: {
            type: 'integer',
            description: '当前页面.默认从1开始',
            format: 'int32'
        },
        pageSize: {
            type: 'integer',
            description: '每页多少条.每页显示多少记录',
            format: 'int32'
        },
        skipCount: {
            type: 'integer',
            description: '跳过多少条',
            format: 'int32',
            readOnly: true
        },
        filter: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const PagingUserListInputSchema = {
    type: 'object',
    properties: {
        pageIndex: {
            type: 'integer',
            description: '当前页面.默认从1开始',
            format: 'int32'
        },
        pageSize: {
            type: 'integer',
            description: '每页多少条.每页显示多少记录',
            format: 'int32'
        },
        skipCount: {
            type: 'integer',
            description: '跳过多少条',
            format: 'int32',
            readOnly: true
        },
        filter: {
            type: 'string',
            description: '关键字',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const ParameterApiDescriptionModelSchema = {
    type: 'object',
    properties: {
        nameOnMethod: {
            type: 'string',
            nullable: true
        },
        name: {
            type: 'string',
            nullable: true
        },
        jsonName: {
            type: 'string',
            nullable: true
        },
        type: {
            type: 'string',
            nullable: true
        },
        typeSimple: {
            type: 'string',
            nullable: true
        },
        isOptional: {
            type: 'boolean'
        },
        defaultValue: {
            nullable: true
        },
        constraintTypes: {
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: true
        },
        bindingSourceId: {
            type: 'string',
            nullable: true
        },
        descriptorName: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const PermissionOutputSchema = {
    type: 'object',
    properties: {
        grants: {
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: true
        },
        allGrants: {
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: true
        },
        permissions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/PermissionTreeDto'
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const PermissionTreeDtoSchema = {
    type: 'object',
    properties: {
        title: {
            type: 'string',
            nullable: true
        },
        key: {
            type: 'string',
            nullable: true
        },
        children: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/PermissionTreeDto'
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const PreViewCodeInputSchema = {
    type: 'object',
    properties: {
        templateId: {
            type: 'string',
            format: 'uuid'
        },
        projectId: {
            type: 'string',
            format: 'uuid'
        }
    },
    additionalProperties: false
} as const;

export const ProjectDtoSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        creationTime: {
            type: 'string',
            format: 'date-time'
        },
        creatorId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        lastModificationTime: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        lastModifierId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        tenantId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        owner: {
            type: 'string',
            description: '负责人',
            nullable: true
        },
        nameSpace: {
            type: 'string',
            description: '名称空间',
            nullable: true
        },
        companyName: {
            type: 'string',
            description: '公司名称',
            nullable: true
        },
        projectName: {
            type: 'string',
            description: '项目名称',
            nullable: true
        },
        remark: {
            type: 'string',
            description: '备注',
            nullable: true
        },
        supportTenant: {
            type: 'boolean',
            description: '是否支持多租户'
        }
    },
    additionalProperties: false
} as const;

export const ProjectDtoPagedResultDtoSchema = {
    type: 'object',
    properties: {
        items: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ProjectDto'
            },
            nullable: true
        },
        totalCount: {
            type: 'integer',
            format: 'int64'
        }
    },
    additionalProperties: false
} as const;

export const PropertyApiDescriptionModelSchema = {
    type: 'object',
    properties: {
        name: {
            type: 'string',
            nullable: true
        },
        jsonName: {
            type: 'string',
            nullable: true
        },
        type: {
            type: 'string',
            nullable: true
        },
        typeSimple: {
            type: 'string',
            nullable: true
        },
        isRequired: {
            type: 'boolean'
        },
        minLength: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        maxLength: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        minimum: {
            type: 'string',
            nullable: true
        },
        maximum: {
            type: 'string',
            nullable: true
        },
        regex: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const RelationalTypeSchema = {
    enum: [10, 20],
    type: 'integer',
    format: 'int32',
    'x-enumNames': ['OnoToOne', 'OneToMany'],
    'x-enum-varnames': ['OnoToOne', 'OneToMany']
} as const;

export const RemoteServiceErrorInfoSchema = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            nullable: true
        },
        message: {
            type: 'string',
            nullable: true
        },
        details: {
            type: 'string',
            nullable: true
        },
        data: {
            type: 'object',
            additionalProperties: {},
            nullable: true
        },
        validationErrors: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/RemoteServiceValidationErrorInfo'
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const RemoteServiceErrorResponseSchema = {
    type: 'object',
    properties: {
        error: {
            '$ref': '#/components/schemas/RemoteServiceErrorInfo'
        }
    },
    additionalProperties: false
} as const;

export const RemoteServiceValidationErrorInfoSchema = {
    type: 'object',
    properties: {
        message: {
            type: 'string',
            nullable: true
        },
        members: {
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const RemoveRoleToOrganizationUnitInputSchema = {
    type: 'object',
    properties: {
        roleId: {
            type: 'string',
            format: 'uuid'
        },
        organizationUnitId: {
            type: 'string',
            format: 'uuid'
        }
    },
    additionalProperties: false
} as const;

export const RemoveUserToOrganizationUnitInputSchema = {
    type: 'object',
    properties: {
        userId: {
            type: 'string',
            format: 'uuid'
        },
        organizationUnitId: {
            type: 'string',
            format: 'uuid'
        }
    },
    additionalProperties: false
} as const;

export const ResetTwoFactorInputSchema = {
    type: 'object',
    properties: {
        userId: {
            type: 'string',
            format: 'uuid'
        }
    },
    additionalProperties: false
} as const;

export const ReturnValueApiDescriptionModelSchema = {
    type: 'object',
    properties: {
        type: {
            type: 'string',
            nullable: true
        },
        typeSimple: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const SendBroadCastMessageInputSchema = {
    type: 'object',
    properties: {
        title: {
            type: 'string',
            description: '消息标题',
            nullable: true
        },
        content: {
            type: 'string',
            description: '消息内容',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const SendCommonMessageInputSchema = {
    type: 'object',
    properties: {
        title: {
            type: 'string',
            description: '消息标题',
            nullable: true
        },
        content: {
            type: 'string',
            description: '消息内容',
            nullable: true
        },
        receiveUserId: {
            type: 'string',
            description: '发送人',
            format: 'uuid'
        },
        receiveUserName: {
            type: 'string',
            description: '发送人名称',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const SetBatchReadInputSchema = {
    type: 'object',
    properties: {
        ids: {
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const SetDataDictinaryDetailInputSchema = {
    required: ['isEnabled'],
    type: 'object',
    properties: {
        dataDictionaryId: {
            type: 'string',
            format: 'uuid'
        },
        dataDictionayDetailId: {
            type: 'string',
            format: 'uuid'
        },
        isEnabled: {
            type: 'boolean'
        }
    },
    additionalProperties: false
} as const;

export const SetReadInputSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        }
    },
    additionalProperties: false
} as const;

export const SettingItemOutputSchema = {
    type: 'object',
    properties: {
        name: {
            type: 'string',
            description: '名称',
            nullable: true
        },
        displayName: {
            type: 'string',
            description: '显示名称',
            nullable: true
        },
        description: {
            type: 'string',
            description: '描述',
            nullable: true
        },
        value: {
            type: 'string',
            description: '值',
            nullable: true
        },
        type: {
            type: 'string',
            description: '前端控件类型',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const SettingOutputSchema = {
    type: 'object',
    properties: {
        group: {
            type: 'string',
            description: '分组',
            nullable: true
        },
        groupDisplayName: {
            type: 'string',
            description: '分组显示名称',
            nullable: true
        },
        settingItemOutput: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/SettingItemOutput'
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const StringInt32KeyValuePairSchema = {
    type: 'object',
    properties: {
        key: {
            type: 'string',
            nullable: true
        },
        value: {
            type: 'integer',
            format: 'int32'
        }
    },
    additionalProperties: false
} as const;

export const StringStringFromSelectorSchema = {
    type: 'object',
    properties: {
        value: {
            type: 'string',
            nullable: true,
            readOnly: true
        },
        label: {
            type: 'string',
            nullable: true,
            readOnly: true
        }
    },
    additionalProperties: false
} as const;

export const TemplateDetailDtoSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        templateId: {
            type: 'string',
            description: '模板id',
            format: 'uuid'
        },
        templateType: {
            '$ref': '#/components/schemas/TemplateType'
        },
        controlType: {
            '$ref': '#/components/schemas/ControlType'
        },
        parentId: {
            type: 'string',
            description: '父级id',
            format: 'uuid',
            nullable: true
        },
        name: {
            type: 'string',
            description: '模板名称',
            nullable: true
        },
        description: {
            type: 'string',
            description: '描述',
            nullable: true
        },
        content: {
            type: 'string',
            description: '模板内容',
            nullable: true
        }
    },
    additionalProperties: false,
    description: '模板明细'
} as const;

export const TemplateDtoSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        creationTime: {
            type: 'string',
            format: 'date-time'
        },
        creatorId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        lastModificationTime: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        lastModifierId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        tenantId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        name: {
            type: 'string',
            description: '名称',
            nullable: true
        },
        remark: {
            type: 'string',
            description: '备注',
            nullable: true
        },
        templateDetails: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/TemplateDetailDto'
            },
            description: '关联属性1:N 模板明细集合',
            nullable: true
        }
    },
    additionalProperties: false,
    description: '模板'
} as const;

export const TemplateDtoPagedResultDtoSchema = {
    type: 'object',
    properties: {
        items: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/TemplateDto'
            },
            nullable: true
        },
        totalCount: {
            type: 'integer',
            format: 'int64'
        }
    },
    additionalProperties: false
} as const;

export const TemplateTreeDtoSchema = {
    type: 'object',
    properties: {
        key: {
            type: 'string',
            description: '模板id',
            format: 'uuid'
        },
        templateType: {
            '$ref': '#/components/schemas/TemplateType'
        },
        controlType: {
            '$ref': '#/components/schemas/ControlType'
        },
        icon: {
            type: 'string',
            description: '图标',
            nullable: true
        },
        isFolder: {
            type: 'boolean',
            description: '是否是文件夹'
        },
        name: {
            type: 'string',
            description: '模板名称',
            nullable: true
        },
        description: {
            type: 'string',
            description: '描述',
            nullable: true
        },
        title: {
            type: 'string',
            description: '描述',
            nullable: true
        },
        content: {
            type: 'string',
            description: '模板内容',
            nullable: true
        },
        children: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/TemplateTreeDto'
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const TemplateTypeSchema = {
    enum: [10, 20],
    type: 'integer',
    format: 'int32',
    'x-enumNames': ['Folder', 'File'],
    'x-enum-varnames': ['Folder', 'File']
} as const;

export const TenantCreateDtoSchema = {
    required: ['adminEmailAddress', 'adminPassword', 'name'],
    type: 'object',
    properties: {
        extraProperties: {
            type: 'object',
            additionalProperties: {},
            nullable: true,
            readOnly: true
        },
        name: {
            maxLength: 64,
            minLength: 0,
            type: 'string'
        },
        adminEmailAddress: {
            maxLength: 256,
            minLength: 1,
            type: 'string',
            format: 'email'
        },
        adminPassword: {
            maxLength: 128,
            minLength: 1,
            type: 'string'
        }
    },
    additionalProperties: false
} as const;

export const TenantDtoSchema = {
    type: 'object',
    properties: {
        extraProperties: {
            type: 'object',
            additionalProperties: {},
            nullable: true,
            readOnly: true
        },
        id: {
            type: 'string',
            format: 'uuid'
        },
        name: {
            type: 'string',
            nullable: true
        },
        concurrencyStamp: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const TenantDtoPagedResultDtoSchema = {
    type: 'object',
    properties: {
        items: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/TenantDto'
            },
            nullable: true
        },
        totalCount: {
            type: 'integer',
            format: 'int64'
        }
    },
    additionalProperties: false
} as const;

export const TimeZoneSchema = {
    type: 'object',
    properties: {
        iana: {
            '$ref': '#/components/schemas/IanaTimeZone'
        },
        windows: {
            '$ref': '#/components/schemas/WindowsTimeZone'
        }
    },
    additionalProperties: false
} as const;

export const TimingDtoSchema = {
    type: 'object',
    properties: {
        timeZone: {
            '$ref': '#/components/schemas/TimeZone'
        }
    },
    additionalProperties: false
} as const;

export const TreeOutputSchema = {
    type: 'object',
    properties: {
        title: {
            type: 'string',
            nullable: true
        },
        key: {
            type: 'string',
            format: 'uuid'
        },
        children: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/TreeOutput'
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const TypeApiDescriptionModelSchema = {
    type: 'object',
    properties: {
        baseType: {
            type: 'string',
            nullable: true
        },
        isEnum: {
            type: 'boolean'
        },
        enumNames: {
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: true
        },
        enumValues: {
            type: 'array',
            items: {},
            nullable: true
        },
        genericArguments: {
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: true
        },
        properties: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/PropertyApiDescriptionModel'
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const UpdateAggregateInputSchema = {
    required: ['code', 'description'],
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        code: {
            minLength: 1,
            type: 'string',
            description: '编码'
        },
        description: {
            minLength: 1,
            type: 'string',
            description: '描述'
        }
    },
    additionalProperties: false
} as const;

export const UpdateDataDictinaryInputSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        code: {
            type: 'string',
            nullable: true
        },
        displayText: {
            type: 'string',
            nullable: true
        },
        description: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const UpdateDetailInputSchema = {
    type: 'object',
    properties: {
        dataDictionaryId: {
            type: 'string',
            format: 'uuid'
        },
        id: {
            type: 'string',
            format: 'uuid'
        },
        displayText: {
            type: 'string',
            nullable: true
        },
        description: {
            type: 'string',
            nullable: true
        },
        order: {
            type: 'integer',
            format: 'int32'
        }
    },
    additionalProperties: false
} as const;

export const UpdateEntityModelInputSchema = {
    required: ['code', 'description'],
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        code: {
            minLength: 1,
            type: 'string',
            description: '编码'
        },
        description: {
            minLength: 1,
            type: 'string',
            description: '描述'
        },
        relationalType: {
            '$ref': '#/components/schemas/RelationalType'
        }
    },
    additionalProperties: false
} as const;

export const UpdateEntityModelPropertyInputSchema = {
    required: ['code', 'description'],
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        propertyId: {
            type: 'string',
            format: 'uuid'
        },
        code: {
            minLength: 1,
            type: 'string',
            description: '编码'
        },
        description: {
            minLength: 1,
            type: 'string',
            description: '描述'
        },
        isRequired: {
            type: 'boolean',
            description: '必填'
        },
        maxLength: {
            type: 'integer',
            description: '字符串最大长度',
            format: 'int32',
            nullable: true
        },
        minLength: {
            type: 'integer',
            description: '字符串最小长度',
            format: 'int32',
            nullable: true
        },
        decimalPrecision: {
            type: 'integer',
            description: '当类型为decimal时的小数位数 (18,4) 中的18',
            format: 'int32',
            nullable: true
        },
        decimalScale: {
            type: 'integer',
            description: '当类型为decimal时的字段长度 (18,4) 中的4',
            format: 'int32',
            nullable: true
        },
        enumTypeId: {
            type: 'string',
            description: '枚举类型Id',
            format: 'uuid',
            nullable: true
        },
        dataTypeId: {
            type: 'string',
            description: '数据类型Id',
            format: 'uuid',
            nullable: true
        },
        entityModelId: {
            type: 'string',
            description: '实体模型Id',
            format: 'uuid'
        },
        allowSearch: {
            type: 'boolean',
            description: '允许作为查询条件'
        },
        allowAdd: {
            type: 'boolean',
            description: '允许添加'
        },
        allowEdit: {
            type: 'boolean',
            description: '允许编辑'
        }
    },
    additionalProperties: false
} as const;

export const UpdateEnumTypeInputSchema = {
    required: ['code', 'description'],
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        code: {
            minLength: 1,
            type: 'string',
            description: '编码'
        },
        description: {
            minLength: 1,
            type: 'string',
            description: '描述'
        }
    },
    additionalProperties: false
} as const;

export const UpdateEnumTypePropertyInputSchema = {
    required: ['code', 'description'],
    type: 'object',
    properties: {
        enumTypeId: {
            type: 'string',
            description: 'Id',
            format: 'uuid'
        },
        id: {
            type: 'string',
            description: 'Id',
            format: 'uuid'
        },
        code: {
            minLength: 1,
            type: 'string',
            description: '编码'
        },
        value: {
            type: 'integer',
            description: '枚举值',
            format: 'int32'
        },
        description: {
            minLength: 1,
            type: 'string',
            description: '描述'
        }
    },
    additionalProperties: false
} as const;

export const UpdateFeatureDtoSchema = {
    type: 'object',
    properties: {
        name: {
            type: 'string',
            nullable: true
        },
        value: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const UpdateFeatureInputSchema = {
    type: 'object',
    properties: {
        providerName: {
            type: 'string',
            nullable: true
        },
        providerKey: {
            type: 'string',
            nullable: true
        },
        updateFeaturesDto: {
            '$ref': '#/components/schemas/UpdateFeaturesDto'
        }
    },
    additionalProperties: false
} as const;

export const UpdateFeaturesDtoSchema = {
    type: 'object',
    properties: {
        features: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/UpdateFeatureDto'
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const UpdateLanguageInputSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            description: '语言Id',
            format: 'uuid'
        },
        cultureName: {
            type: 'string',
            description: '语言名称',
            nullable: true
        },
        uiCultureName: {
            type: 'string',
            description: 'Ui语言名称',
            nullable: true
        },
        displayName: {
            type: 'string',
            description: '显示名称',
            nullable: true
        },
        flagIcon: {
            type: 'string',
            description: '图标',
            nullable: true
        },
        isEnabled: {
            type: 'boolean',
            description: '是否启用'
        }
    },
    additionalProperties: false,
    description: '删除语言'
} as const;

export const UpdateLanguageTextInputSchema = {
    required: ['cultureName', 'name', 'resourceName', 'value'],
    type: 'object',
    properties: {
        resourceName: {
            minLength: 1,
            type: 'string',
            description: '资源名称'
        },
        cultureName: {
            minLength: 1,
            type: 'string',
            description: '语言名称'
        },
        name: {
            minLength: 1,
            type: 'string',
            description: '名称'
        },
        value: {
            minLength: 1,
            type: 'string',
            description: '值'
        }
    },
    additionalProperties: false,
    description: '删除语言文本'
} as const;

export const UpdateOrganizationUnitInputSchema = {
    type: 'object',
    properties: {
        displayName: {
            type: 'string',
            nullable: true
        },
        id: {
            type: 'string',
            format: 'uuid'
        }
    },
    additionalProperties: false
} as const;

export const UpdatePermissionDtoSchema = {
    type: 'object',
    properties: {
        name: {
            type: 'string',
            nullable: true
        },
        isGranted: {
            type: 'boolean'
        }
    },
    additionalProperties: false
} as const;

export const UpdatePermissionsDtoSchema = {
    type: 'object',
    properties: {
        permissions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/UpdatePermissionDto'
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const UpdateProjectInputSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        owner: {
            type: 'string',
            description: '负责人',
            nullable: true
        },
        companyName: {
            type: 'string',
            description: '公司名称',
            nullable: true
        },
        projectName: {
            type: 'string',
            description: '项目名称',
            nullable: true
        },
        remark: {
            type: 'string',
            description: '备注',
            nullable: true
        },
        supportTenant: {
            type: 'boolean',
            description: '是否支持多租户'
        }
    },
    additionalProperties: false
} as const;

export const UpdateRoleInputSchema = {
    type: 'object',
    properties: {
        roleId: {
            type: 'string',
            format: 'uuid'
        },
        roleInfo: {
            '$ref': '#/components/schemas/IdentityRoleUpdateDto'
        }
    },
    additionalProperties: false
} as const;

export const UpdateRolePermissionsInputSchema = {
    type: 'object',
    properties: {
        providerName: {
            type: 'string',
            nullable: true
        },
        providerKey: {
            type: 'string',
            nullable: true
        },
        updatePermissionsDto: {
            '$ref': '#/components/schemas/UpdatePermissionsDto'
        }
    },
    additionalProperties: false
} as const;

export const UpdateSettingInputSchema = {
    type: 'object',
    properties: {
        values: {
            type: 'object',
            additionalProperties: {
                type: 'string',
                nullable: true
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const UpdateTemplateDetailContentInputSchema = {
    type: 'object',
    properties: {
        templateId: {
            type: 'string',
            description: '模板id',
            format: 'uuid'
        },
        templateDetailId: {
            type: 'string',
            format: 'uuid'
        },
        content: {
            type: 'string',
            description: '模板内容',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const UpdateTemplateDetailInputSchema = {
    type: 'object',
    properties: {
        templateId: {
            type: 'string',
            description: '模板id',
            format: 'uuid'
        },
        templateDetailId: {
            type: 'string',
            format: 'uuid'
        },
        controlType: {
            '$ref': '#/components/schemas/ControlType'
        },
        name: {
            type: 'string',
            description: '模板类型',
            nullable: true
        },
        description: {
            type: 'string',
            description: '描述',
            nullable: true
        },
        content: {
            type: 'string',
            description: '模板内容',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const UpdateTemplateInputSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        name: {
            type: 'string',
            description: '名称',
            nullable: true
        },
        remark: {
            type: 'string',
            description: '备注',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const UpdateTenantInputSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        name: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const UpdateTextTemplateInputSchema = {
    required: ['code', 'content', 'cultureName', 'name'],
    type: 'object',
    properties: {
        id: {
            type: 'string',
            description: '模板Id',
            format: 'uuid'
        },
        name: {
            minLength: 1,
            type: 'string',
            description: '名称'
        },
        code: {
            minLength: 1,
            type: 'string',
            description: '编码'
        },
        content: {
            minLength: 1,
            type: 'string',
            description: '内容'
        },
        cultureName: {
            minLength: 1,
            type: 'string',
            description: '语言'
        }
    },
    additionalProperties: false,
    description: '更新模板'
} as const;

export const UpdateUserInputSchema = {
    type: 'object',
    properties: {
        userId: {
            type: 'string',
            format: 'uuid'
        },
        userInfo: {
            '$ref': '#/components/schemas/IdentityUserUpdateDto'
        }
    },
    additionalProperties: false
} as const;

export const UserLoginInfoSchema = {
    required: ['password', 'userNameOrEmailAddress'],
    type: 'object',
    properties: {
        userNameOrEmailAddress: {
            maxLength: 255,
            minLength: 0,
            type: 'string'
        },
        password: {
            maxLength: 32,
            minLength: 0,
            type: 'string',
            format: 'password'
        },
        rememberMe: {
            type: 'boolean'
        }
    },
    additionalProperties: false
} as const;

export const WindowsTimeZoneSchema = {
    type: 'object',
    properties: {
        timeZoneId: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;